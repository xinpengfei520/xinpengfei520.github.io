<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>「IT大飞说」的博客</title>
  
  <subtitle>魔都某非著名互联网创业公司码农，一个狂热的技术人！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.x-sir.com/"/>
  <updated>2018-12-08T15:02:48.596Z</updated>
  <id>http://www.x-sir.com/</id>
  
  <author>
    <name>x-sir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>绘制一个漂亮的弧形 View</title>
    <link href="http://www.x-sir.com/2018/11/06/%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%BC%A7%E5%BD%A2%20View/"/>
    <id>http://www.x-sir.com/2018/11/06/绘制一个漂亮的弧形 View/</id>
    <published>2018-11-06T03:28:01.000Z</published>
    <updated>2018-12-08T15:02:48.596Z</updated>
    
    <content type="html"><![CDATA[<p>来，先看下效果图：</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FjVEV1HKnkl637u0Qs7im1YRfBjo" alt=""></p><p>怎么样？漂亮吧，上面是一个标题栏，下面是一个弧形的 View，标题栏和弧形 View 从左到右都有一个线性的渐变色，类似于手机 QQ 顶部的渐变效果，关于弧形的这种效果，使用的场景还是比较普遍的，小面我们就一起来看看如何绘制吧。</p><h2 id="1-先自定义一个-ArcView"><a href="#1-先自定义一个-ArcView" class="headerlink" title="1.先自定义一个 ArcView"></a>1.先自定义一个 ArcView</h2><p>创建一个类 ArcView 继承于 View，然后我们重写其三个构造方法，还有 onMeasure() 和 onDraw() 方法，这都是自定义 View 最基本的写法，比较简单这里就不详细说了， onMeasure() 用于测量 View 的宽高尺寸，onDraw() 就是具体的绘制过程了，具体的绘制思路是：我们在 onMeasure（）方法中拿到测量出来的宽和高，然后再 onDraw() 中初始化一个画笔，我们可以创建一个 LinearGradient 对象，然后调用设置画笔的 setShader() 方法就可以达到画笔渐变色的效果，然后再创建一个 Rect 对象，这里只是创建了一个矩形对象，要想绘制弧形，我们还需要设置绘制的路径，创建一个 Path 对象，分别调用 moveTo() 方法，和 quadTo() 方法，moveTo （）不会进行绘制，只用于移动移动画笔，一般和其他方法配合使用，这里和 quadTo() 方法配合使用，而 quadTo() 用于绘制圆滑的曲线，即贝塞尔曲线。mPath.quadTo(x1, y1, x2, y2) 其中x1、y1 为控制点，x2、y2 为结束点。有了路径之后我们就可以轻而易举地绘制出一个弧形了，完整的代码请看下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by x-sir on 2018/8/10 :)</span><br><span class="line"> * Function:自定义弧形 View</span><br><span class="line"> */</span><br><span class="line">public class ArcView extends View &#123;</span><br><span class="line"></span><br><span class="line">    private int mWidth;</span><br><span class="line">    private int mHeight;</span><br><span class="line">    private int mArcHeight; // 弧形高度</span><br><span class="line">    private int mBgColor; // 背景颜色</span><br><span class="line">    private Paint mPaint;</span><br><span class="line"></span><br><span class="line">    public ArcView(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ArcView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ArcView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ArcView);</span><br><span class="line">        mArcHeight = typedArray.getDimensionPixelSize(R.styleable.ArcView_arcHeight, 0);</span><br><span class="line">        mBgColor = typedArray.getColor(R.styleable.ArcView_bgColor, Color.parseColor(&quot;#1E90FF&quot;));</span><br><span class="line">        typedArray.recycle();</span><br><span class="line">        mPaint = new Paint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressLint(&quot;DrawAllocation&quot;)</span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        // 参数一为渐变起初点坐标 x 位置，参数二为 y 轴位置，参数三和四分辨对应渐变终点，最后参数为平铺方式，这里设置为镜像</span><br><span class="line">        LinearGradient lg = new LinearGradient(0, 0, mWidth, 0,</span><br><span class="line">                Color.parseColor(&quot;#4796FB&quot;), Color.parseColor(&quot;#5AB4F9&quot;),</span><br><span class="line">                Shader.TileMode.CLAMP);</span><br><span class="line">        // 刚才已经讲到 Gradient 是基于 Shader 类，所以我们通过 Paint 的 setShader 方法来设置这个渐变</span><br><span class="line">        mPaint.setShader(lg);</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        //mPaint.setColor(mBgColor);</span><br><span class="line">        mPaint.setAntiAlias(true);</span><br><span class="line">        Rect rect = new Rect(0, 0, mWidth, mHeight - mArcHeight);</span><br><span class="line">        canvas.drawRect(rect, mPaint);</span><br><span class="line">        Path path = new Path();</span><br><span class="line">        path.moveTo(0, mHeight - mArcHeight);</span><br><span class="line">        path.quadTo(mWidth / 2, mHeight, mWidth, mHeight - mArcHeight);</span><br><span class="line">        canvas.drawPath(path, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        int widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        int widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        int heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        int heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        if (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            mWidth = widthSize;</span><br><span class="line">        &#125;</span><br><span class="line">        if (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            mHeight = heightSize;</span><br><span class="line">        &#125;</span><br><span class="line">        setMeasuredDimension(mWidth, mHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里只定义了弧形的高度和背景颜色这两个自定义属性，其中还有渐变颜色的开始色值和结束色值，还有是否需要渐变等属性，都可以定义为自定义的属性，方便直接在布局文件中灵活进行配置，以适应不同的需求，也比较简单，我这里为了就不实现了。</p><h2 id="2-自定义一个通用的-titlebar"><a href="#2-自定义一个通用的-titlebar" class="headerlink" title="2.自定义一个通用的 titlebar"></a>2.自定义一个通用的 titlebar</h2><p>这样做我们可以提高代码的复用性，可以将一些功能封装进去，也更好地体现了封装的思想，实现也比较简单，使用 LayoutInflater 加载了一个布局文件，然后将 文字，字体大小，字体颜色和 title 背景色等定义成了自定义的属性，方便在布局文件中进行设置，另外我们内部默认处理了点击返回按钮的事件，对于需要其他特殊情况下返回按钮的处理，我们也定义了一个接口，方便外部使用接口来自行进行处理，代码也非常简单，看下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by x-sir on 2018/9/2 :)</span><br><span class="line"> * Function:自定义通用 TitleBar</span><br><span class="line"> */</span><br><span class="line">public class TitleBarLayout extends LinearLayout &#123;</span><br><span class="line"></span><br><span class="line">    private ImageView ivBack;</span><br><span class="line">    private ImageView ivMenu;</span><br><span class="line">    private TextView tvTitleName;</span><br><span class="line">    private LinearLayout llTitleBg;</span><br><span class="line">    private CharSequence mText;</span><br><span class="line">    private int mTitleBgColor;</span><br><span class="line">    private boolean mMenuVisible;</span><br><span class="line">    private int mTextSize;</span><br><span class="line">    private int mTextColor;</span><br><span class="line">    private OnMenuClickListener mListener;</span><br><span class="line">    private OnBackClickListener mOnBackListener;</span><br><span class="line">    private static final String DEFAULT_TEXT = &quot;Title&quot;; // default text.</span><br><span class="line">    private static final int DEFAULT_TEXT_SIZE = 16; // default text size.</span><br><span class="line">    private static final String TAG = &quot;TitleBarLayout&quot;;</span><br><span class="line"></span><br><span class="line">    public TitleBarLayout(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TitleBarLayout(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TitleBarLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line"></span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.TitleBarLayout);</span><br><span class="line">        mText = typedArray.getText(R.styleable.TitleBarLayout_text);</span><br><span class="line">        mTextSize = typedArray.getDimensionPixelSize(R.styleable.TitleBarLayout_textSize, DEFAULT_TEXT_SIZE);</span><br><span class="line">        mTextColor = typedArray.getColor(R.styleable.TitleBarLayout_textColor, Color.parseColor(&quot;#FFFFFF&quot;));</span><br><span class="line">        mTitleBgColor = typedArray.getColor(R.styleable.TitleBarLayout_titleBgColor, Color.parseColor(&quot;#1E90FF&quot;));</span><br><span class="line">        mMenuVisible = typedArray.getBoolean(R.styleable.TitleBarLayout_menuVisible, false);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line"></span><br><span class="line">        initView(context);</span><br><span class="line">        initData();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initView(Context context) &#123;</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.common_titlebar, this);</span><br><span class="line">        ivBack = findViewById(R.id.ivBack);</span><br><span class="line">        ivMenu = findViewById(R.id.ivMenu);</span><br><span class="line">        tvTitleName = findViewById(R.id.tvTitleName);</span><br><span class="line">        llTitleBg = findViewById(R.id.llTitleBg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initData() &#123;</span><br><span class="line">        String text = (mText != null) ? mText.toString() : DEFAULT_TEXT;</span><br><span class="line">        tvTitleName.setText(text);</span><br><span class="line">        tvTitleName.setTextSize(TypedValue.COMPLEX_UNIT_PX, mTextSize);</span><br><span class="line">        tvTitleName.setTextColor(mTextColor);</span><br><span class="line">        //llTitleBg.setBackgroundColor(mTitleBgColor);</span><br><span class="line">        ivMenu.setVisibility(mMenuVisible ? VISIBLE : INVISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initListener() &#123;</span><br><span class="line">        ivBack.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            // 如果监听器不为空就让其自己处理，为空就默认处理（销毁页面）</span><br><span class="line">            if (mOnBackListener != null) &#123;</span><br><span class="line">                mOnBackListener.onClick();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ((Activity) getContext()).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ivMenu.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            if (mListener != null) &#123;</span><br><span class="line">                mListener.onClick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitleName(String title) &#123;</span><br><span class="line">        if (!TextUtils.isEmpty(title)) &#123;</span><br><span class="line">            tvTitleName.setText(title);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.e(TAG, &quot;set title name failed, because title is null!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnMenuListener(OnMenuClickListener mListener) &#123;</span><br><span class="line">        this.mListener = mListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnBackListener(OnBackClickListener mOnBackListener) &#123;</span><br><span class="line">        this.mOnBackListener = mOnBackListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OnMenuClickListener &#123;</span><br><span class="line">        void onClick();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OnBackClickListener &#123;</span><br><span class="line">        void onClick();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里为了和绘制的弧形协调，我将 title 布局的背景设置了一个渐变的 shape 。</p><h2 id="3-将布局延伸到系统状态栏"><a href="#3-将布局延伸到系统状态栏" class="headerlink" title="3.将布局延伸到系统状态栏"></a>3.将布局延伸到系统状态栏</h2><p>Android 5.0 之后我们可以设置 Activity 的布局延伸到系统状态栏中，这样我们页面看起来更美观和协调，设置也比较简单，直接贴代码了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>另外在布局文件中也可以设置，只需在你 App 引用的主题中添加一行代码即可：</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FtLpSwRRbekR_PbI6n24DXvRqM8m" alt=""></p><p>注意：因为这个属性是 5.0 之后才有的，在实际开发中需要做兼容处理，代码中设置时需要判断一下版本，布局文件中可以新建一个 values-v21 文件夹做兼容处理。</p><p>如果你的 title 的文字跑到状态栏里了，那样会很丑，在 title 布局的根标签中添加下面一行代码就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:fitsSystemWindows=&quot;true&quot;</span><br></pre></td></tr></table></figure><p>这行代码的意思就是不占用系统状态栏的空间。</p><p>好了，所有绘制工作都已经完成了，是不是非常简单呢？如果觉得不错的话，欢迎点赞、评论和转发，你们的支持是我坚持不懈的动力！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来，先看下效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pcobk8jbf.bkt.clouddn.com/FjVEV1HKnkl637u0Qs7im1YRfBjo&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;怎么样？漂亮吧，上面是一个标题栏，下面是一个弧形的 View，标
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="View" scheme="http://www.x-sir.com/tags/View/"/>
    
      <category term="技术提升" scheme="http://www.x-sir.com/tags/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/"/>
    
      <category term="ArcView" scheme="http://www.x-sir.com/tags/ArcView/"/>
    
  </entry>
  
  <entry>
    <title>你租的房子遇 “坑” 了么？</title>
    <link href="http://www.x-sir.com/2018/10/26/%E4%BD%A0%E7%A7%9F%E7%9A%84%E6%88%BF%E5%AD%90%E9%81%87%20%E2%80%9C%E5%9D%91%E2%80%9D%20%E4%BA%86%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.x-sir.com/2018/10/26/你租的房子遇 “坑” 了么？/</id>
    <published>2018-10-26T14:59:57.000Z</published>
    <updated>2018-12-08T15:04:57.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你租的房子遇-“坑”-了么？"><a href="#你租的房子遇-“坑”-了么？" class="headerlink" title="你租的房子遇 “坑” 了么？"></a>你租的房子遇 “坑” 了么？</h1><blockquote><p>前段时间真的是太忙了，出差了一周，另外还有自己的一堆事儿，忙成狗，几乎每天也就睡 5、6 个小时，现在终于不忙了，然后就可以安安静静地写文章了，好久没更了，让大家久等了。最近这段时间我身边发生了好多事情，有欠钱不还的，有租房被中介坑的，有公司裁员的… 真的是发生在谁身上谁倒霉，有些事情我们也无法避免，我们要做的就是不断吸取教训，长点心眼，提高自己判断力，来保护自己的利益不受侵害。</p></blockquote><p>自从前一段时间爆出来自如甲醛房子的问题，后来又有自媒体爆料，一阿里 P7 员工在租住了杭州自如房 6 个月后，被查出患白血病，不久之后病情恶化，去世，一度引发舆论的关注！最近，又有媒体陆续曝出租客在自如出租房内的插座里发现针孔摄像头，租住数月后才发现。最近我身边几个认识的同学、同事租房也被中介坑，好像最近一段时间骗子又猖狂起来了？</p><h2 id="1-“寓见”你真是倒了八辈子的霉了"><a href="#1-“寓见”你真是倒了八辈子的霉了" class="headerlink" title="1.“寓见”你真是倒了八辈子的霉了"></a>1.“寓见”你真是倒了八辈子的霉了</h2><p>【上海寓见公寓“爆仓”“租金贷”风险恐密集爆发】曾被雷军看好的长租公寓“爆仓”了。如今寓见公寓资金链断裂，一些房东在未收到租金的情况下，要求房客搬出。部分租客已聚集在寓见公寓总部所在地的上海市徐汇经侦支队报案，并试图“围堵”寓见公寓CEO 兼创始人林小森。在寓见公寓此次“爆仓”前，已经有多家长租公寓品牌出现问题。</p><p>这件事情真真切切的就发生在我同学的身上，他们从“寓见公寓”那里租的房子，“寓见公寓”从房东那里租的房子，她们每个月按时把租金交给“寓见公寓”，而“寓见公寓”没有把钱给房东，现在房东没有收到钱，房东现在找租客的事，另外，“寓见公寓”给租客们签的合同都是通过贷款平台贷的款，相当于是每个月的房租是分期付款，假设你签了 1 年的合同，那也就是说，“寓见公寓” 一次性就拿到了 1 年的租金（有钱了就可以去用钱去赚更多的钱了），然后，租客就每个月向贷款机构去还钱，这里说明一下，租客其实是不知道他们向贷款机构借钱了，签合同的时候，寓见的人只是说，这这个平台只是交租金，并没有向租客明确说明贷款这件事，我认为“寓见”隐瞒了事实，侵犯了租客的知情权，存在欺诈行为，当出现了事情之后，租客们才知道是“被”贷款了，如果没出现这事，租客可能一直都不知道“被”贷款了，现在的各种贷款都和你的征信挂钩，如果你没有按时交的话，有可能已经影响到你的征信了，可能影响到你买房买车等，但是你却全然不知，真的是太坑了，稍微一不注意就掉坑里了。现在“寓见”跑路，房东不让租客住房子，为了不影响征信，租客还要还贷款，你说这不是两头受气吃亏么？都是打工的，辛辛苦苦工作一个月，把工资的一大部分都交房租了，还遇到这样的事情，你说糟心不糟心？这种事情报案的话，处理起来也比较麻烦，能起到的作用也比较有限，所以，我们要擦亮自己的眼睛才是最主要的！</p><p>在这里提醒大家一下：如果租房的时候让你绑定个人银行卡并且还要让你通过某个你没听过的平台交房租时，你可得警惕注意了，稍不注意你就“被”贷款了！</p><h2 id="2-黑中介“昊园恒业”是真的黑"><a href="#2-黑中介“昊园恒业”是真的黑" class="headerlink" title="2.黑中介“昊园恒业”是真的黑"></a>2.黑中介“昊园恒业”是真的黑</h2><p><img src="http://pcobk8jbf.bkt.clouddn.com/15405599314402.jpg" alt=""></p><p>这件事也是发生在我之前同事的身上，她之前是通过“昊园恒业”租的房子，然后在不知情的情况下，也被贷款了，是通过一个叫“元宝e家”的分期付款平台，元宝一次性把钱转给中介，现在中介违约了，中途让租客搬家，现在中介需要把钱返给元宝或者是将剩余的部分返给租客，但是中介一直拖着迟迟不给，现在租客和元宝之间的贷款还是有效的，也就说租客还要给元宝还贷款（影响征信），为什么中介迟迟拿不出钱？想都不用想，中介肯定把钱挪作他用了，一次性收一年的房租，中介才不会傻傻把钱拿手里或者存银行，他肯定是用这笔收过来的租金再搞其他投资，然后赚更多的钱，说白了就是以租房为幌子，玩的是资金流的把戏，美其名曰：“帮租客们减轻租房的压力，分期付款，享受高品质的生活”，嗯，没毛病，这样租户付款压力减轻了，还不用支付额外的利息，于是很多租户就接受了这种付款方式，这样租客们就轻轻松松的掉坑里了！</p><p>下图是我前同事给大家的一些建议，都是血淋淋的教训，希望大家引以为鉴！</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/IMG_1692.jpg" alt=""></p><p>最后，建议大家在租房的时候，首先找个人的房源或者是比较靠谱的中介，可以先搜一下中介的网上的评价或者有没有负面信息，然后再考虑要不要租，再签合同的时候也需要仔细看看有没有坑，另外对于押金条及合同等其他的材料要保留好，如果发生其他情况可作为证据，对于合同内容部分应该也必须加盖相应的公章，否则合同也是无效的合同，有些中介根本就没有合同或者合同很粗糙（严格来说不算合同），那你就得注意了，希望大家在租房的时候多留意，多长点心眼；还有就是租房的时候不要租刚装修完的房子，看着很干净，实则甲醛等严重超标，最好时租之前有人住过的房子就基本没什么问题。最后送给大家一句话，害人之心不可有，防人之心不可无！</p><p>如果，你也在租房时遇到坑了，欢迎在下方评论，让更多的人看到，另外你觉得文章不错的话，欢迎点赞和转发，原创不易，且行且珍惜，谢谢你们！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你租的房子遇-“坑”-了么？&quot;&gt;&lt;a href=&quot;#你租的房子遇-“坑”-了么？&quot; class=&quot;headerlink&quot; title=&quot;你租的房子遇 “坑” 了么？&quot;&gt;&lt;/a&gt;你租的房子遇 “坑” 了么？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前段时间真的是太忙
      
    
    </summary>
    
      <category term="生活" scheme="http://www.x-sir.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="租房" scheme="http://www.x-sir.com/tags/%E7%A7%9F%E6%88%BF/"/>
    
      <category term="生活" scheme="http://www.x-sir.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你搭建 Hexo + GitHub 博客</title>
    <link href="http://www.x-sir.com/2018/10/10/HexoBlogBuild/"/>
    <id>http://www.x-sir.com/2018/10/10/HexoBlogBuild/</id>
    <published>2018-10-10T15:47:57.000Z</published>
    <updated>2018-12-08T15:34:36.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-环境安装"><a href="#1-环境安装" class="headerlink" title="1.环境安装"></a>1.环境安装</h2><h3 id="1-1-Git"><a href="#1-1-Git" class="headerlink" title="1.1 Git"></a>1.1 Git</h3><p>Windows:<br><a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a></p><p>如果是 Mac 电脑的话，请先安装 Xcode，因为 Xcode 自带 Git.</p><h3 id="1-2-Node-js"><a href="#1-2-Node-js" class="headerlink" title="1.2 Node.js"></a>1.2 Node.js</h3><p>下载对应系统的 node 安装包，一路 next 无脑安装即可；</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><h3 id="1-3-hexo"><a href="#1-3-hexo" class="headerlink" title="1.3 hexo"></a>1.3 hexo</h3><p>因为 npm 命令是 node 中的，所有需要先安装node 然后再安装 hexo，然后利用 npm 命令即可安装 hexo（Windows 在任意位置点击鼠标右键，选择 Git bash，Mac 直接在终端中如下执行命令即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>提示本篇文章可能存在时效性，最新版本 hexo 的安装请查看官方文档：</p><p><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></p><p>报错:</p><p>npm ERR! registry error parsing json 错误，可能需要设置 npm 代理，执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.cnpmjs.org</span><br></pre></td></tr></table></figure><p>hexo:command not found<br>删除刚刚安装的 npm 目录，重新执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>来安装 hexo。</p><h2 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2.开始搭建"></a>2.开始搭建</h2><p>首先创建 hexo 文件夹，如 HexoBlog，注意创建的文件夹一定是空的！！！进入 HexoBlog 目录并执行以下指令(Windows 在 HexoBlog 文件夹内点击鼠标右键，选择 Git bash，Mac 直接 cd 进入)，Hexo 即会自动在文件夹生成网站所需要的所有文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>安装依赖包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>报错：</p><p>evernotecid://785B2D88-EE4A-435D-8F13-6593AEC86C1F/appyinxiangcom/15001405/ENResource/p25846<img src="http://pcobk8jbf.bkt.clouddn.com/FhjB0eR8pfC5j4rXk0pept0hCEwJ" alt=""></p><p>根据错误提示，是系统没有 <strong>package.json</strong> 这个文件导致。这个文件的作用就是管理你本地安装的<strong>npm</strong> 包，一个 <strong>package.json</strong> 文件可以做如下事情：</p><p>1.展示项目所依赖的npm包；<br>2.允许你指定一个包的版本[范围]；<br>3.让你建立起稳定，意味着你可以更好的与其他开发者共享；</p><p>此刻我们需要执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>创建package.json文件，系统会提示相关配置，也可以使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>直接创建 <strong>package.json</strong> 文件，这样创建好处是必填项已经帮你填好，执行完命令后可以看到用户路径下多了一个 <strong>package.json</strong> 文件。</p><p>温馨提示：如果是 Mac 的话，执行每一步命令记得都需要加 sudo !</p><p>现在我们已经搭建起本地的 hexo 博客了，执行以下命令，然后到浏览器输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>hexo generate<br>hexo server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">好了，至此，我们本地博客已经搭建起来了，这里只能本地访问，别人看不到的，我们搭建的博客如果只是在本地那是没有任何意义的，接下来，我们需要把本地的博客部署到 GitHub 上去。</span><br><span class="line"></span><br><span class="line">报错：</span><br><span class="line"></span><br><span class="line">执行 ```hexo server``` 提示找不到该指令!</span><br><span class="line"></span><br><span class="line">解决办法：</span><br><span class="line"></span><br><span class="line">在 **Hexo 3.0** 后 **server** 被单独出来了，需要安装 **server**，安装的命令如下：</span><br></pre></td></tr></table></figure></p><p>npm install hexo -server –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装 **server** 后再试，问题解决~</span><br><span class="line"></span><br><span class="line">## 3.GitHub 创建博客</span><br><span class="line"></span><br><span class="line">如果已经有 GitHub 账号就创建一个仓库，仓库的名字需要和你的账号对应，格式为: **yourname.github.io** 其中 yourname 就是你的 GitHub 的用户名。</span><br><span class="line"></span><br><span class="line">如果没有 GitHub 账号，您需要先注册一个账号，注册完之后需要把你本地机器的 公钥添加到 GitHub 中去。</span><br><span class="line"></span><br><span class="line">### 3.1 生成 SSH 密钥</span><br><span class="line"></span><br><span class="line">打开 Git Bash 执行如下命令行：</span><br></pre></td></tr></table></figure></p><p>ssh-keygen -t rsa -C “youremailaddress”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">执行完会提示你输入一些信息，这里我们直接一路回车即可，密码设置为空。</span><br><span class="line"></span><br><span class="line">### 3.2 查看 SSH 密钥</span><br><span class="line"></span><br><span class="line">SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录，进入 .ssh 目录下，命令行：</span><br></pre></td></tr></table></figure></p><p>ls<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">查看如果显示 id_rsa 和 id_rsa.pub，说明已经成功生成了 SSH 公钥。</span><br><span class="line"></span><br><span class="line">### 3.3 添加 SSH 密钥</span><br><span class="line"></span><br><span class="line">打开 id_rsa.pub（Windows 可用任意一个文本编辑器打开，Mac 下用 cat 或者 vim 编辑器查看）复制里面的全部内容到:</span><br><span class="line"></span><br><span class="line">[https://github.com/settings/ssh](https://github.com/settings/ssh) </span><br><span class="line"></span><br><span class="line">找到 Add SSH key，粘贴进去并保存～</span><br><span class="line"></span><br><span class="line">添加 ssh 的作用是你的 GitHub 就可以和你本地的机器进行 push 和 pull 操作了，不需要输入任何的密码，GitHub 就已经知道你是操作的了。</span><br><span class="line"></span><br><span class="line">## 4.Hexo 的使用</span><br><span class="line"></span><br><span class="line">### 4.1 Hexo 的目录结构</span><br><span class="line"></span><br><span class="line">![](http://pcobk8jbf.bkt.clouddn.com/Fpjfqr-LghTX4LF8Ivk4U06WdRNo)</span><br><span class="line"></span><br><span class="line">### 4.2 全局配置文件_config.yml</span><br></pre></td></tr></table></figure></p><h1 id="Hexo-Configuration"><a href="#Hexo-Configuration" class="headerlink" title="Hexo Configuration"></a>Hexo Configuration</h1><h1 id="Docs-http-hexo-io-docs-configuration-html"><a href="#Docs-http-hexo-io-docs-configuration-html" class="headerlink" title="Docs: http://hexo.io/docs/configuration.html"></a>Docs: <a href="http://hexo.io/docs/configuration.html" target="_blank" rel="noopener">http://hexo.io/docs/configuration.html</a></h1><h1 id="Source-https-github-com-hexojs-hexo"><a href="#Source-https-github-com-hexojs-hexo" class="headerlink" title="Source: https://github.com/hexojs/hexo/"></a>Source: <a href="https://github.com/hexojs/hexo/" target="_blank" rel="noopener">https://github.com/hexojs/hexo/</a></h1><h1 id="Site-站点信息"><a href="#Site-站点信息" class="headerlink" title="Site #站点信息"></a>Site #站点信息</h1><p>title:  #标题<br>subtitle:  #副标题<br>description:  #站点描述，给搜索引擎看的<br>author:  #作者<br>email:  #电子邮箱<br>language: zh-CN #语言</p><h1 id="URL-链接格式"><a href="#URL-链接格式" class="headerlink" title="URL #链接格式"></a>URL #链接格式</h1><p>url:  #网址<br>root: / #根目录<br>permalink: :year/:month/:day/:title/ #文章的链接格式<br>tag_dir: tags #标签目录<br>archive_dir: archives #存档目录<br>category_dir: categories #分类目录<br>code_dir: downloads/code<br>permalink_defaults:</p><h1 id="Directory-目录"><a href="#Directory-目录" class="headerlink" title="Directory #目录"></a>Directory #目录</h1><p>source_dir: source #源文件目录<br>public_dir: public #生成的网页文件目录</p><h1 id="Writing-写作"><a href="#Writing-写作" class="headerlink" title="Writing #写作"></a>Writing #写作</h1><p>new_post_name: :title.md #新文章标题<br>default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）<br>titlecase: false #标题转换成大写<br>external_link: true #在新选项卡中打开连接<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: false<br>relative_link: false<br>highlight: #语法高亮<br>  enable: true #是否启用<br>  line_number: true #显示行号<br>  tab_replace:</p><h1 id="Category-amp-Tag-分类和标签"><a href="#Category-amp-Tag-分类和标签" class="headerlink" title="Category &amp; Tag #分类和标签"></a>Category &amp; Tag #分类和标签</h1><p>default_category: uncategorized #默认分类<br>category_map:<br>tag_map:</p><h1 id="Archives"><a href="#Archives" class="headerlink" title="Archives"></a>Archives</h1><p>2: 开启分页<br>1: 禁用分页<br>0: 全部禁用<br>archive: 2<br>category: 2<br>tag: 2</p><h1 id="Server-本地服务器"><a href="#Server-本地服务器" class="headerlink" title="Server #本地服务器"></a>Server #本地服务器</h1><p>port: 4000 #端口号<br>server_ip: localhost #IP 地址<br>logger: false<br>logger_format: dev</p><h1 id="Date-Time-format-日期时间格式"><a href="#Date-Time-format-日期时间格式" class="headerlink" title="Date / Time format #日期时间格式"></a>Date / Time format #日期时间格式</h1><p>date_format: YYYY-MM-DD #参考<a href="http://momentjs.com/docs/#/displaying/format/" target="_blank" rel="noopener">http://momentjs.com/docs/#/displaying/format/</a><br>time_format: H:mm:ss</p><h1 id="Pagination-分页"><a href="#Pagination-分页" class="headerlink" title="Pagination #分页"></a>Pagination #分页</h1><p>per_page: 10 #每页文章数，设置成 0 禁用分页<br>pagination_dir: page</p><h1 id="Disqus-Disqus评论，替换为多说"><a href="#Disqus-Disqus评论，替换为多说" class="headerlink" title="Disqus #Disqus评论，替换为多说"></a>Disqus #Disqus评论，替换为多说</h1><p>disqus_shortname:</p><h1 id="Extensions-拓展插件"><a href="#Extensions-拓展插件" class="headerlink" title="Extensions #拓展插件"></a>Extensions #拓展插件</h1><p>theme: landscape-plus #主题<br>exclude_generator:<br>plugins: #插件，例如生成 RSS 和站点地图的</p><ul><li>hexo-generator-feed</li><li>hexo-generator-sitemap<h1 id="Deployment-部署，将-lmintlcx-改成用户名"><a href="#Deployment-部署，将-lmintlcx-改成用户名" class="headerlink" title="Deployment #部署，将 lmintlcx 改成用户名"></a>Deployment #部署，将 lmintlcx 改成用户名</h1>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourgithub/yourgithub.github.io.git<br>branch: master<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">编辑 **config.yml** 文件将 repo: git@github.com:yourgithub/yourgithub.github.io.git 替换为你刚建的 GitHub 仓库的地址。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">每一行配置文件的冒号 “:” 后面有一个空格！</span><br><span class="line">repo 的这种形式的是配置了SSH Key之后的，如果没有配置则使用 https 形式的地址。</span><br><span class="line"></span><br><span class="line">然后执行如下命令即可完成生成静态网页 &amp; 部署：</span><br></pre></td></tr></table></figure></li></ul><p>hexo generate<br>hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">提示：每次在执行上面两条命令之前先 hexo clean 一下，这样可以防止缓存的影响。</span><br><span class="line"></span><br><span class="line">如上命令可以简写，简写和全写命令对应如下：</span><br></pre></td></tr></table></figure></p><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">问题：</span><br><span class="line"></span><br><span class="line">![](http://pcobk8jbf.bkt.clouddn.com/FiSI_f8EBlBMHZXLfeqVa0kTQvt8)</span><br><span class="line"></span><br><span class="line">安装 deployer:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-deployer-git –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再重新 hexo d，如果显示以下提示说明部署成功：</span><br></pre></td></tr></table></figure></p><p>[info] Deploy done: git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后打开浏览器输入：yourgithub.github.io</span><br><span class="line"></span><br><span class="line">如果你看到了和刚才本地访问一样的网页，说明我们的博客已经成功的部署到了 GitHub 了。</span><br><span class="line"></span><br><span class="line">## 5.绑定域名</span><br><span class="line"></span><br><span class="line">博客搭建完，默认的域名只能是：yourgithub.github.io 而且是不能修改的，如果要想逼格更高点，想绑定自己的域名也是可以的。</span><br><span class="line"></span><br><span class="line">### 5.1 购买域名</span><br><span class="line"></span><br><span class="line">首先你需要购买一个域名，现在基本都是到万网或者腾讯等也可以购买域名，购买也比较简单，这里放出阿里万网购买地址：</span><br><span class="line"></span><br><span class="line">[https://wanwang.aliyun.com/](https://wanwang.aliyun.com/)</span><br><span class="line"></span><br><span class="line">### 5.2 配置DNS地址</span><br><span class="line"></span><br><span class="line">这里以万网为例，进入万网的管理控制台(阿里云手机 APP 也可以)进行修改，修改 DNS 为 DNSPod 的免费 DNS 地址：</span><br></pre></td></tr></table></figure></p><p>f1g1ns1.dnspod.net<br>f1g1ns2.dnspod.net<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5.3 域名解析</span><br><span class="line"></span><br><span class="line">登录万网控制台或阿里云手机 APP 之后，把我们新注册的域名加进去，在域名解析列表中国添加 3 条解析记录：</span><br></pre></td></tr></table></figure></p><p>@         A         192.30.252.153<br>@         A         192.30.252.154<br>www      CNAME      yourname.github.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中A的两条记录指向的 ip 地址是 GitHub Pages 的提供的 ip，如何知道你的 GitHub 上项目的 ip？</span><br><span class="line"></span><br><span class="line">### 5.4 添加 CNAME 文件</span><br><span class="line"></span><br><span class="line">新建一个名为 CNAME 的文件，无后缀，内容为你的域名地址，将该文件放入本地博客的 source 文件夹里面，执行下面命令并更新到 Github。</span><br></pre></td></tr></table></figure></p><p>hexo clean<br>hexo g<br>hexo d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意：域名的地址不需要添加协议头 **http://** ,直接写域名即可，例如：www.baidu.com</span><br><span class="line"></span><br><span class="line">然后在你的浏览器中输入你的域名，是不是和之前一样，如果一样，说明你的域名已经绑定成功了～</span><br><span class="line"></span><br><span class="line">搭建博客本身的难度不大，重要的是搭建博客这个过程，主要考验自己的动手能力和问题解决能力，过程中你可能会遇见各种各样的问题，然后你会一个个的解决掉这些问题，这本身就是学习的过程，希望大家也能多多动手，希望大家搭建成功～</span><br><span class="line"></span><br><span class="line">最后晒上我的博客地址：</span><br><span class="line"></span><br><span class="line">[http://www.x-sir.com](http://www.x-sir.com)</span><br><span class="line"></span><br><span class="line">## 6.Hexo 博客主题美化</span><br><span class="line"></span><br><span class="line">### 6.1 clone 主题</span><br><span class="line"></span><br><span class="line">Hexo官网：</span><br><span class="line"></span><br><span class="line">[https://hexo.io/themes](https://hexo.io/themes)</span><br><span class="line"></span><br><span class="line">里面有特别多的主题可以选择，我在这里选的是 next这个主题，下载主题：</span><br></pre></td></tr></table></figure></p><p>cd themes<br>git clone <a href="https://github.com/Fechin/hexo-theme-diaspora.git" target="_blank" rel="noopener">https://github.com/Fechin/hexo-theme-diaspora.git</a> diaspora<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 6.2 启用主题</span><br><span class="line"></span><br><span class="line">修改Hexo配置文件 _config.yml 主题项设置为diaspora</span><br></pre></td></tr></table></figure></p><p>…<br>theme: diaspora<br>…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 6.3 更新主题</span><br><span class="line"></span><br><span class="line">注意：请在更时主题时备份_config.yml配置文件</span><br></pre></td></tr></table></figure></p><p>cd themes/diaspora<br>git pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 6.4 发布新主题</span><br><span class="line"></span><br><span class="line">执行如下命令然后浏览器中输入博客地址查看：</span><br></pre></td></tr></table></figure></p><p>hexo clean<br>hexo g<br>hexo d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意：更换新的主题，可能会有一些延迟！</span><br><span class="line"></span><br><span class="line">## 7.Hexo 博客细节配置</span><br><span class="line"></span><br><span class="line">需要修改的内容可以参考网站：</span><br><span class="line"></span><br><span class="line">[https://hexo.io/zh-cn/docs/configuration](https://hexo.io/zh-cn/docs/configuration)</span><br><span class="line"></span><br><span class="line">里面对各个参数有一些详细的解释，我这里修改一些博客的标题，副标题，描述，语言等，建议大家修改一项，重新部署网站一下，因为一旦出错，这样就比较容易找到原因。</span><br><span class="line"></span><br><span class="line">## 8.安装插件</span><br></pre></td></tr></table></figure></p><p>安装插件：npm install 插件名 –save<br>卸载插件：npm uninstall 插件名<br>更新插件和博客框架：npm update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">执行以下命令安装 RSS 插件:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-generator-feed –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">生成站点地图:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-generator-sitemap –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">生成百度站点地图:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-generator-baidu-sitemap –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SEO 优化:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-generator-seo-friendly-sitemap –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HTML 压缩:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-html-minifier –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CSS 压缩:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-clean-css –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">JS 压缩:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-uglify –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">imagages 压缩:</span><br></pre></td></tr></table></figure></p><p>npm install hexo-imagemin –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">插件开启配置</span><br><span class="line"></span><br><span class="line">根目录下的 `_config.yml`，添加以下代码:</span><br></pre></td></tr></table></figure></p><h1 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h1><p>feed:<br>type: atom<br>path: atom.xml<br>limit: 20</p><h1 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h1><h1 id="提交给谷歌搜素引擎，SEO优化开启配置是一样的"><a href="#提交给谷歌搜素引擎，SEO优化开启配置是一样的" class="headerlink" title="提交给谷歌搜素引擎，SEO优化开启配置是一样的"></a>提交给谷歌搜素引擎，SEO优化开启配置是一样的</h1><p>sitemap:<br>    path: sitemap.xml</p><h1 id="提交百度搜索引擎"><a href="#提交百度搜索引擎" class="headerlink" title="提交百度搜索引擎"></a>提交百度搜索引擎</h1><p>baidusitemap:<br>    path: baidusitemap.xml </p><h1 id="HTML压缩"><a href="#HTML压缩" class="headerlink" title="HTML压缩"></a>HTML压缩</h1><p>html_minifier:<br>  exclude:     </p><h1 id="css压缩"><a href="#css压缩" class="headerlink" title="css压缩"></a>css压缩</h1><p>clean_css:<br>  exclude: </p><pre><code>- &apos;*.min.css&apos;</code></pre><h1 id="js压缩"><a href="#js压缩" class="headerlink" title="js压缩"></a>js压缩</h1><p>uglify:<br>  mangle: true<br>  output:<br>  compress:<br>  exclude: </p><pre><code>- &apos;*.min.js&apos;</code></pre><h1 id="image压缩"><a href="#image压缩" class="headerlink" title="image压缩"></a>image压缩</h1><p>imagemin:<br>  enable     : true<br>  interlaced : false<br>  multipass  : false<br>  optimizationLevel: 2<br>  pngquant   : false<br>  progressive: false<br><code>`</code></p><p>注意：目前设置 HTML 压缩有报错！<br>图片压缩会导致图片破损！<br>package.json 文件中可以看安装了哪些插件。</p><h2 id="9-安装-gitalk-评论插件"><a href="#9-安装-gitalk-评论插件" class="headerlink" title="9.安装 gitalk 评论插件"></a>9.安装 gitalk 评论插件</h2><p>参考下面的博客即可，写的比较详细：</p><p><a href="https://segmentfault.com/a/1190000014085547" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014085547</a></p><p>如果安装过程中，出现问题请先戳gitalk issue 区看看有没有解决方案：</p><p><a href="https://github.com/gitalk/gitalk/issues" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></li><li><a href="http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/" target="_blank" rel="noopener">http://wuxiaolong.me/2015/07/31/build-blog-by-hexo/</a></li><li><a href="https://www.jianshu.com/p/e5f95eb990ad" target="_blank" rel="noopener">https://www.jianshu.com/p/e5f95eb990ad</a></li><li><a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">https://github.com/Fechin/hexo-theme-diaspora</a></li><li><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></li><li><a href="https://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">https://www.jianshu.com/p/86557c34b671</a></li><li><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a></li><li><a href="https://www.jianshu.com/p/9be29ed2f4b7" target="_blank" rel="noopener">https://www.jianshu.com/p/9be29ed2f4b7</a></li><li><a href="https://imsun.net/posts/gitment-introduction/#more" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/#more</a></li><li><a href="https://calpa.me/2018/03/10/gitalk-error-validation-failed-442-solution" target="_blank" rel="noopener">https://calpa.me/2018/03/10/gitalk-error-validation-failed-442-solution</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-环境安装&quot;&gt;&lt;a href=&quot;#1-环境安装&quot; class=&quot;headerlink&quot; title=&quot;1.环境安装&quot;&gt;&lt;/a&gt;1.环境安装&lt;/h2&gt;&lt;h3 id=&quot;1-1-Git&quot;&gt;&lt;a href=&quot;#1-1-Git&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="iTunes" scheme="http://www.x-sir.com/tags/iTunes/"/>
    
      <category term="Windows" scheme="http://www.x-sir.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>技术人如何提升自己（推荐必读）</title>
    <link href="http://www.x-sir.com/2018/09/24/%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1%EF%BC%88%E6%8E%A8%E8%8D%90%E5%BF%85%E8%AF%BB%EF%BC%89/"/>
    <id>http://www.x-sir.com/2018/09/24/技术人如何提升自己（推荐必读）/</id>
    <published>2018-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:04:07.935Z</updated>
    
    <content type="html"><![CDATA[<center>点击关注<span style="color:#0000ff;">“IT大飞说”</span>，置顶或星标公众号</center><br><center>订阅公众号（<strong>ID：ITBigFly</strong>）第一时间收到推送</center><p><img src="http://pcobk8jbf.bkt.clouddn.com/FlN7rYqRCcxStKbnJhYl-MSOaW80" alt=""></p><blockquote><p>作为一个技术人，我们不仅要不断地学习来提升自己不被淘汰，另外也要不断总结自己的经验和教训，踩过的坑、走过的弯路要善于去思考如何避免下次再踩坑？我们也不要一直局限于自己的技术世界一心只敲代码，两耳不闻窗外事，这样未免就有点太局限了，也不利于自己的发展。我们经历着互联网飞速发展的时代，从最初的 PC 时代，到移动互联网，然后到近几年的大数据、人工智能、区块链等技术，技术迭代的速度比以前更加快速了，这也意味着新的技术也会慢慢的代替掉一些旧的技术，因此你也要跟随着时代的变化，不断更新自己的技术栈，去适应新的技术环境，提升自己的核心竞争力！一些新兴技术行业的兴盛必然会导致另一些技术的衰落，衰落这个词用的不是太恰当，举个例子，例如 12、13 年很火的移动开发到这几年逐渐的也没那么火了，其实经过这几年的发展，开发的门槛越来越低，对技术人才的需求也日渐趋于饱和了，但是初级工程师还是占很大一部分，高级工程师还是比较少，所以中间出现了断层的现象，如果你是初级者，怎样更快速地去提升自己，实现向高级的跨越？这应该是你需要思考的问题。如果是中高级开发者，也应该有一些危机感，这样才能时刻提醒自己去不断的学习，不断地去改变和适应技术的发展，跟随技术的潮流不断前进，以至于才不会被淘汰！另外，也不要一直守着自己的一亩三分地，要适当的多学习一些其他方面的技术，培养自己的第二技术能力，前提是首先得干好自己的本职工作，利用闲余时间去学习一些其他技术，技术之间也是相通的，如果你对某一个方面研究比较透彻的话，学习其他方面的技术也是很容易能够上手的。之前看过美国那些 FLAG 公司，他们一般招聘都不会去明确的注明招聘的岗位，一般面试主要都是让你做算法题，他们认为你把算法这么难的东西都搞会了，不管干其他什么岗位工作都是没有问题的。另外在工作的同时也要注重提升自己的技术影响力，我觉得这个也是比较重要的一方面，好处是不仅可以帮你之后找工作、升职、加薪和赚钱都是有帮助的，那么该如何提升自己呢？</p></blockquote><h2 id="1-坚持写作"><a href="#1-坚持写作" class="headerlink" title="1.坚持写作"></a>1.坚持写作</h2><p>我认为，写作对于一个技术人来说太重要了，一方面不仅可以提高自己的写作水平，另一方面也可以锻炼自己的语言组织和表达能力，巩固知识点，加深理解和记忆。写作有形式可以是写博客和公众号，还有像知乎这种其他平台。特别说一下写博客，现在的博客平台有很多，比较有名的有 CSDN、简书、掘金等平台，基本都可以使用可视化的 MarkDown 编辑器来写，用 MarkDown 的好处是语法简单，显示效果很简洁，不需要去特别排版，这样写作的效率就提高了；作为技术文章，我强烈建议大家原创，只有这样才能将自己的学到的知识总结并且转化为自己的输出，更重要的是在写作的过程中会让你有更加深刻的理解，有时候虽然你学会了某个新技术，但是你不一定能写的出来，可以这么说，学会了是一个境界，理解了又是一个境界，理解了并写出来又是另一个境界，写出来并且让别人能看懂又是一种更高的境界！建议大家在技术的道路上切勿眼高手低，实践是检验真理的唯一标准！实践出真知！写作要多站到读者的角度去思考怎么写？怎么写才能让读者更容易的理解？怎样写才能适合不同技术水平层次的人理解？多思考几个为什么，不骄不躁，慢慢地一步一个脚印，写的时间长了也就得心应手了，如果你能一直坚持下去，越往后写你会发现你会喜欢上写作的，一天不写你就会觉得手痒痒，习惯一旦养成了，就自然而然的去执行了，即习惯成自然。随着你坚持写作的时间越来越长，你的读者和文章的阅读量也会越来越多，可能还有读者给你留言与你交流，这时候你需要和读者一起互动或者耐心的帮助他们解答问题，这样可以增加读者对你的好感度，容易积攒自己的口碑，口碑上去了影响力自然就有了，容易提升个人品牌的知名度！知名度上去了就会产生品牌效应。当然，要想达到这种程度，非常的难，好多人坚持到一半就坚持不下去了，如果你能一直坚持下去你就成功了一半，你看好多公号大V，大多都是吭哧吭哧坚持写了好几年，最好才成大V的。不必羡慕别人，你需要做的是静下心，坚持下去，在对的时间做对的事，剩下的就交给时间，相信功夫不负有心人，你要的岁月都会给你！</p><h2 id="2-热爱开源"><a href="#2-热爱开源" class="headerlink" title="2.热爱开源"></a>2.热爱开源</h2><p>作为全世界最大的同 xing 交(开)友(源)社区GitHub，被大家戏称为 GayHub，我想作为一个程序员应该都不陌生吧，说实在的，开源社区真的是我们程序员的福利之地啊，好多大厂包括 Google、FaceBook、Square、Apache、阿里、腾讯等都开源了好多优秀的框架，大大提升了程序员开发效率，也降低了开发的成本。我是在 14 年的时候就申请了 GitHub 账号，刚开始只是在上面找一些东西，也不怎么会用，也不会开源项目，直到 16 年的时候看了一些 GitHub 的教程，逐渐的发现了它的好，它的强大之处，然后开始为开源世界做贡献，从此一发不可收拾，慢慢的就喜欢上 GitHub 了…什么？卧槽！你特么 qinshou 啊，连 GitHub 都不放过! 汗====囧 emmmmmmmmmmm~ 我竟无言以对，感觉自己有点方啊！好了，言归正传，继续说我们的 GitHub，GitHub 汇集了全世界好多的优秀开源项目和一大批的优秀开发者，从此学习交流不分国界，不仅可以和全世界各地的开发者一起沟通交流，fork 优秀的开源项目来进行学习，另外可以 PR 和提 issue，一起为开源世界做贡献，时间长了，你会发现这是一件很有成就感的事情。当你看到自己提交的历史，特别有成就感！</p><p>下面是我的 commit map.</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FqgLWwe7EtwvYq_LqVAL3R0Uhq9q" alt=""></p><p>我虽然也不是每天都 commit，但不定期零零散散都会坚持去 commit，在使用 GitHub 的这几年，我也收到了好几份的面试邀请邮件，其中包括几个大厂，有 Amazon、阿里等，这个好像也是根据 GitHub 排名和贡献来发招聘邀请邮件的，虽说这种招人的方式有一定的局限，但是我觉得最起码可以体现出，你一定是一个热爱开源，热于分享的程序员，没毛病！</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FoiqSg-OIVmO8sVL7LY1CIZa8Jg5" alt=""></p><p>下面是我收到的邮件：<br><img src="http://pcobk8jbf.bkt.clouddn.com/FozVZjrf495JcLfX4BUcM6XSUAQF" alt=""></p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FqQ7EmzqVhd5iqhpoyYiWArN8MsP" alt=""></p><h2 id="3-多向大牛学习"><a href="#3-多向大牛学习" class="headerlink" title="3.多向大牛学习"></a>3.多向大牛学习</h2><p>大牛之所以是大牛，肯定是在某一方很厉害，有值得你去学习的地方，跟着大牛的脚步可以让你事半功倍，不仅可以借鉴一下大牛们的成功经验，也可以让我们少走弯路，这里的少走弯路的意思是避免让你走错方向，把时间浪费在不必要的地方，当然学习过程中遇到的坎和坑，该经历的还是要经历的，遇到的坑多了以后你就都能应对自如了，这就是经验吧！只有自己亲身体会了、总结了才能转化为自己的经验。多与大牛接触和交流，学习大牛解决问题的方式，然后结合自身去不断实践，取长补短，不断总结并完善自己！那么怎样向大牛学习呢？大牛们一般都有自己的公号，博客或者技术圈子，你可以关注大牛的公号或博客来学习，另外，这两年知识付费也火热起来，像知识星球、极客时间等一些有代表性的平台更是火热，一些大牛也有自己的知识星球或者是付费专栏，你可以选择几个适合自己的然后加入圈子学习，这样就可以更近距离的与大牛交流和学习了。知识付费还有一个作用就是对信息的筛选，说实在的，我们都处在信息爆炸的时代，每天都会接受到各种各样的信息，当然也包括各种垃圾信息，很容易让人眼花缭乱，知识的内容也鱼龙混杂，质量也参差不齐，而知识付费的好处就是别人帮你把知识已经筛选好了，而且质量也比较有保证，接下来你只要安心的学习就好了！而有的人就是喜欢免费的，之前听有人说：“现在学习还要花钱啊，网上一找一大堆！” 是，没错！现在网上最不缺的就是免费的学习资源了，这么多资源，你知道课程的质量怎么样么？你如何才能筛选出最好的资源？这些资源都是你需要花时间和精力去做的事情，而且找到的并不一定好，而大牛们用他们多年来的经验然后总结出来的东西，你只需要花几十块或者上百块买来去学习，何乐而不为呢？这样大佬们也乐于分享，你也得到了一个学习的圈子，加入圈子的人都和你一样，都是为了学习才加入的，相当于是给你们营造了一个学习的氛围，物以类聚，人以群分，和学习的人在一起，你学习的动力也有了，学习也就更快了，这样你自己的时间成本也会省下来，相当于是用钱买时间，有的人就是算不清这个账，愿意花上百块的钱去玩，也不愿意花钱去投资自己的学习，那么我只能说你的目光太短浅了，我希望大家不要只看到眼前的利益，目光放长远一些，多提高一些自己的认知能力，建议大家能用钱解决问题的一定要用钱去解决！</p><p>好了，今天的分享就到这里，如果我的文章对你有帮助、有启发，请帮我点个赞，谢谢！另外也欢迎大家在下方评论留言与我交流。</p><p><strong>猜你喜欢：</strong><br><a href="https://mp.weixin.qq.com/s/ReJJFmQm6l55r9pvo7aFIA" target="_blank" rel="noopener">给大家推荐一个神器</a><br><a href="https://mp.weixin.qq.com/s/hVhhDdr3Bo4qLIdOkHsM_Q" target="_blank" rel="noopener">Android 最全 Intent 传递数据姿势</a> </p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FijAsROsRHuwVUivQ8M9D5o3RSdP" alt=""></p><center><span style="color:#bdbdbd;">欢迎扫码关注我的公众号</span></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;点击关注&lt;span style=&quot;color:#0000ff;&quot;&gt;“IT大飞说”&lt;/span&gt;，置顶或星标公众号&lt;/center&gt;&lt;br&gt;&lt;center&gt;订阅公众号（&lt;strong&gt;ID：ITBigFly&lt;/strong&gt;）第一时间收到推送&lt;/center&gt;

&lt;
      
    
    </summary>
    
      <category term="阅读" scheme="http://www.x-sir.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="技术提升" scheme="http://www.x-sir.com/tags/%E6%8A%80%E6%9C%AF%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>给大家推荐一个神器</title>
    <link href="http://www.x-sir.com/2018/08/24/%E7%BB%99%E5%A4%A7%E5%AE%B6%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AA%E7%A5%9E%E5%99%A8/"/>
    <id>http://www.x-sir.com/2018/08/24/给大家推荐一个神器/</id>
    <published>2018-08-24T15:47:57.000Z</published>
    <updated>2018-12-08T14:31:08.727Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天不扯淡，给你们来点干的，推荐给你们一个神器…<br>这个神器是什么呢？</p></blockquote><p>现如今，对于广大 IT 从业人员来说，很重要的三项技能是编程、英语和写作，编程不用说了，我们就靠这个吃饭的；英语对大多数的人来说，可能比较差，也算是比较头疼的，对于编程人员来说，对英语门槛的要求还算比较低的，因为写代码基本都是一些常用的编程语法词汇，另外对于英文的技术文档的阅读也还好，其实也就那么多的词汇，基本都是一些专业词汇，英文技术文档看多了，基本也没太多的生词，偶尔遇到不会的生词，用翻译软件查一下也特别的方便，但是我认为这只达到了编程所具备的基本英语水平，不算是真正的会英语，语言就是用来交流的，如果你能流畅的用英语交流才算是自己的一项技能，真正的会英语。对于大多数中国人来说，从小学到现在，学了差不多十几年，但是学的都是哑巴英语，老师大多发音也不标准，然后为了考试学习一堆的语法知识，全都是为了考试，根本没法用来交流，所以你英语没学好也不全是自己的原因。我自认为我自己的英语水平还可以，不算很厉害，但是在同龄人中应该算是比较偏上吧，一方面是有兴趣、喜欢学，另一方面自己也总结了一些学习英语方面的方法和技巧，回头有时间给大家整理一篇关于英语学习方面的文章，今天这里就不展开赘述了；另外一个技能就是写作了，对于大多数程序员来说，写作也算是比较困难的，尤其是刚开始写作，想半天写不出来一句话，说实话我自己也是，万事开头难，但是我相信只要坚持写作，坚持阅读，慢慢地一点一点，然后再写作过程中不断的总结，相信写多了你的写作水平会提高的，进步总有一个过程，写作这个技能还是要慢慢要磨出来的，不要寻求什么捷径，一夜变成大文豪，那是不可能的！回头有时间给大家整理一篇关于如何写作方面的文章。</p><p>如果说一篇文章内容很好，但是排版很差你会看吗？我想我是没有看下去的欲望，先抛开内容不说，排版可以说是一篇文章的脸面，第一印象不好，读者也就没有看下去的欲望了，所以一篇文章的第一印象是非常重要的。一篇好的文章排版肯定是经过精心设计的，包括文字的字体大小、颜色，字间距、行间距等等，另外还有文章的配图，颜色的搭配，文章段落的划分，文章的两端缩进等，总之一句话，好的排版会让你感觉看着很舒服，阅读起来也不会累。我刚开始写作的时候也遇到了排版的问题，不管怎么排，还是感觉怪怪的，没有达到自己想要的那种效果，我平时也比较喜欢写博客，现在好多博客平台大都支持 MarkDown 语法，你用 MarkDown 写完之后直接导入就行了，也不用过多的修改效果也很好，简单、清晰！但是还有一些平台是不支持 MarkDown 的，所以排版就是一个问题了，后来发现微信公众号有一个第三方的插件叫壹伴助手，试用过一段时间，不过他是收费的，后来我又发现了一个免费排版神器，也就是我现在一直用的，用了这么长时间感觉用的很爽，也很方便，所以我就推荐给大家，它叫 「Md2All」，是一个在线 MarkDown 排版神器，浏览器访问地址为：<a href="http://md.aclickall.com" target="_blank" rel="noopener">http://md.aclickall.com</a> 可能一些读者已经用过了，用过的就不用往下看了，下面我就做一个简单的介绍和使用。</p><p>说一下我觉得比较好的地方：</p><ul><li>支持一键排版；</li><li>支持几十种代码主题；</li><li>支持代码显示行数及代码紧凑；</li><li>支持导出带样式的 html;</li><li>支持上传到七牛云图床；</li><li>…</li></ul><p>更多功能介绍及使用，请访问：<a href="http://md.aclickall.com" target="_blank" rel="noopener">http://md.aclickall.com</a> 查看，或者关注作者的微信公众号：颜家大少。</p><p>编辑面截图如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Fibvp8KrdOR0LafZfeJlE4V8nYF4H1zFicosPAa478L0EfHELAHJflGrcE4XaAQAfqRJqp1lobtV20JL0gJrYz3w/0?wx_fmt=png" alt="image"></p><p>左边是 MarkDown 编辑区，右边是预览，界面很清晰、简洁！基本上，我每次排版的步骤是：</p><ol><li>先用本地的 Markdown 编辑器写文章；</li><li>然后复制到 Md2All 的 MarkDown 编辑区；</li><li>设置文章的主题及边距、字体颜色大小等参数；</li><li>点击一键排版(自动会给你排好版);</li><li>点击复制，然后粘贴到微信公众号或者 CSDN、cnblog 的 html 编辑器中就可以发布文章了；</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Fibvp8KrdOR0LafZfeJlE4V8nYF4H1zFic9vSSvCsT7h5vPaXf7lWagbNYfl3HNqVn8zMuzp8q1DmLnEFTZGYH0w/0?wx_fmt=png" alt="image"></p><p>根据我以往的经验，如果是发布到 CSDN 或 cnblog，直接发布即可，如果是发布到微信公众号，你可以先推送到手机上预览一下，一般情况下做一些微调就可以了，例如字间距、行间距、两端缩进等，你可以参考本篇文章的排版效果。</p><p>好了，今天的推荐就到这里，声明一下，本篇文章没有任何利益及商业互推关系，纯粹是发自内心的觉得这个工具好用，所以就推荐给大家，好东西是要分享出来的，这样才有意义！</p><p>大家好，才是真的好！</p><p>喜欢我的话，就关注一下呗！</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Fibvp8KrdOR3R9eSia2xaQhTua1DicaGhWVpFxsQZJicvmlHnic1mBxqNDw7HeBu0aIUHD3Fcd9r5E1EElaGO4Z38lA/0?wx_fmt=jpeg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天不扯淡，给你们来点干的，推荐给你们一个神器…&lt;br&gt;这个神器是什么呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现如今，对于广大 IT 从业人员来说，很重要的三项技能是编程、英语和写作，编程不用说了，我们就靠这个吃饭的；英语对大多数的人来说，
      
    
    </summary>
    
      <category term="工具" scheme="http://www.x-sir.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="写作" scheme="http://www.x-sir.com/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="MarkDown" scheme="http://www.x-sir.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>825 安卓巴士精华总结</title>
    <link href="http://www.x-sir.com/2018/08/24/825%20%E5%AE%89%E5%8D%93%E5%B7%B4%E5%A3%AB%E7%B2%BE%E5%8D%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://www.x-sir.com/2018/08/24/825 安卓巴士精华总结/</id>
    <published>2018-08-24T15:47:57.000Z</published>
    <updated>2018-12-08T14:26:59.113Z</updated>
    
    <content type="html"><![CDATA[<p>一年一度的安卓巴士开发者大会在上海隆重举行，有幸亲临参加了本次大会，本篇文章仅对本次大会的个人感受和各位技术大佬的分享以及未来的技术趋势与大家分享。</p><p>本次大会的主要内容有：技术大咖的个人主题分享，互动抽奖环节，圆桌会议，下午茶休息（提供各种水果和小吃甜点等），抽奖的奖品也比较丰厚，有技术图书，贴纸，抱枕，T恤，GDD 大会门票，各种小玩具等，奖品也比较丰厚。</p><h2 id="上午场"><a href="#上午场" class="headerlink" title="上午场"></a>上午场</h2><p>上午第一位分享的嘉宾是 openinstall 的联合创始人徐兴，分享的是 openinstall 的 App  免邀请码安装及 App 安装来源的数据统计等技术功能，对于App的推广和数据统计来说是一把利器，相比传统的邀请码安装方式更简单、更容易，想了解更多请到官网进行详细了解，这里就不赘述了。</p><p>上午第二位分享的嘉宾是饿了么大佬王雨威（江湖人称：巴掌），主要分享了一个饿了么的来源库：UETool ，简单说，它是一个让程序员，设计师，测试可以动态调试 View 各种属性的工具，功能很强大，大大提高了开发的效率，更多介绍请戳 GitHub：</p><p><a href="https://github.com/eleme/UETool" target="_blank" rel="noopener">https://github.com/eleme/UETool</a> </p><p>上午第三位分享的嘉宾是手机淘宝无线技术专家费义云，主要是先从计算机图形学引申到手机上的图形开发处理技术，从 GPU 底层的到上层应用进行详细的讲解，理论性和专业性都比较强，另外还有3D、AR、VR、OpenGL ES 等方面都做了细致的介绍，最后他还提出技术人提升的三层模型的观点，为技术人指明了方向，值得技术人思考。</p><h2 id="下午场"><a href="#下午场" class="headerlink" title="下午场"></a>下午场</h2><p>下午第一位分享的嘉宾是张涛，大家可能都知道他的张涛实验室，分享的主题是《Android 十年，还有哪些可以做的》，主要从 Android 的过去到现在的发展，以及Android 技术演变的历程为主线，以几个大厂商 App 为例，回顾了 Android 的技术演变和 App 架构演变历程，中间贯穿了各种技术知识，分享很棒，回顾过去，展望未来，对于 Android 未来技术的发展趋势也指明了方向。</p><p>下午第二位分享的嘉宾是美图高级安卓开发工程师邱炬，分享的主题是《全面解析Android 线程》，由浅入深，从上层到底层的线程创建，让我们更清楚的了解了线程的本质，还对线程的优先级进行详细的介绍，另外还对线程池及多线程开发的注意事项进行详细的讲解，还对线程的性能及安全性问题做了很细致的分享，这些问题都是实际开发中经常遇到的问题，真的是收益匪浅！</p><p>下午第三位分享的嘉宾是我们的刘哥，也就是《Android进阶之光》的作者刘望舒，分享的主题是《Android应用开发如何更高效的阅读系统源码》，主要从：为何要阅读系统源码？如何阅读系统源码？系统源码的知识体系等几个问题来给大家分享了阅读系统源码的重要性和好处，这样以便于我们更好的理解 Android，理解 Android 系统，方便我们写出更高质量的代码，也可以解决一些难以解决的问题，最后还给大家推荐了一些优秀的博客作者和工具，干货满满，刘哥的演讲有激情、有速度！期待刘哥的新书《Android进阶解密》。</p><p>下午第三个进行分享的是：四位嘉宾的圆桌会议，四位嘉宾分别是：纪元（大数据嘉宾）MobData运营VP，费义云（机器学习嘉宾）手机淘宝无线技术专家，任义（区块链嘉宾）米客思科技公司董事长，章国良（人工智能嘉宾）AIhub 人工智能助推器CEO，四位大咖从各自不同的技术领域分享了如何用技术解决现实的问题，以及未来技术的发展趋势，开阔了我们的眼界，同时让我们对未来进行思考，我们不要仅仅停留在自己的一亩三分地，更应该去提升自己的技术栈和眼界，不断提高自身的能力，勇于创新，这样才能弯道超车！</p><p>下午第四位分享的嘉宾是前爱奇艺多媒体开发何俊林，也就是我们的鱼哥，分享的主题是《Android音视频知识分享》，主要从多媒体基础概念，Android平台播放器，常见音视频开发中的问题总结，播放案例介绍等几个方面详细介绍了音视频的相关知识，讲的很详细很系统。这两年音视频也算是比较火的一个方向，对于音视频开发者来说，真的是干货很足！</p><p>下午第五位分享的嘉宾是扔物线朱凯，也是最后一位分享嘉宾，分享的主题是《从图片上传说起：我们究竟需要怎样的Android工程师》，主要从图片上传怎么做？BASE64 更安全和稳定？怎么给服务器提交信息？Retrofit 比 OkHttp 好用？等几个问题，由浅入深地进行讲解，简单明了，作为技术人应该知其然，也要知其所以然。最后还为我们的安卓工程师指明了方向，分析了特殊时代的困境和机遇，如何迈向「高级」工程师，我想每个人自己的心里都有一个答案。</p><p>总体来说，本次大会真的是收益匪浅，不仅可以和大佬们面对面分享，另外还可以认识一些同行的朋友，建议大家以后有机会多参加一些这样的活动。本文只对本次大会做简单的总结，如果想查看本次大会的视频，照片，PPT可关注“安卓巴士Android开发者门户”公众号，回复关键字：「825资料」、「825视频」、「825照片」即可获取。</p><p>声明一下，本文没有任何商业推广等利益关系，纯粹是为了给大家分享技术来进行学习交流！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一年一度的安卓巴士开发者大会在上海隆重举行，有幸亲临参加了本次大会，本篇文章仅对本次大会的个人感受和各位技术大佬的分享以及未来的技术趋势与大家分享。&lt;/p&gt;
&lt;p&gt;本次大会的主要内容有：技术大咖的个人主题分享，互动抽奖环节，圆桌会议，下午茶休息（提供各种水果和小吃甜点等），
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="openinstall" scheme="http://www.x-sir.com/tags/openinstall/"/>
    
      <category term="UETool" scheme="http://www.x-sir.com/tags/UETool/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你撸一个 Loading</title>
    <link href="http://www.x-sir.com/2018/08/19/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%92%B8%E4%B8%80%E4%B8%AALoading/"/>
    <id>http://www.x-sir.com/2018/08/19/手把手教你撸一个Loading/</id>
    <published>2018-08-19T15:47:57.000Z</published>
    <updated>2018-12-08T15:06:20.250Z</updated>
    
    <content type="html"><![CDATA[<center>点击上面蓝色字体关注<span style="color:#0000ff;">“IT大飞说”</span></center><center>置顶公众号（<strong>ID：ITBigFly</strong>）第一时间收到推送</center><p><img src="https://img-blog.csdn.net/20180823140750489?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnBlbmdmZWk1MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><blockquote><p>作为 Android 开发者，无奈经常会碰到各种各样的奇葩需求，现在大多公司 UI 设计图、标注都是按 IOS 来设计的，包括一个IOS特有的效果等，要实现和 IOS 一样的效果，无奈 Android 只能各种仿 IOS 了，经常也是产品被怼，IOS 能实现，为什么 Android 不能实现？好吧，今天我们就来写一个仿 IOS 的加载 loading 效果。</p></blockquote><h2 id="1-先看效果图"><a href="#1-先看效果图" class="headerlink" title="1.先看效果图"></a>1.先看效果图</h2><p><img src="https://img-blog.csdn.net/20180823140811132?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnBlbmdmZWk1MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>效果还满意吧？实现的思路是，在页面上弹出一个全屏的 popupWindow,居中是一个半透明的圆角shape,中间一个 gif 图片，下面是一个 TextView，最外层布局背景为透明，另外把其他需外设置的属性及参数通过建造者模式从外部进行配置，同时提供默认的属性值，这样可以适应各种需求的变化了，代码也比较简单，我的注释也写的比较详细，相信你一定能看得懂。</p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by x-sir on 2018/8/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line">public class LoadingView &#123;</span><br><span class="line"></span><br><span class="line">    private String mText;</span><br><span class="line">    private int mTextSize;</span><br><span class="line">    private int mGifWidth;</span><br><span class="line">    private int mGifHeight;</span><br><span class="line">    private int mDrawableId;</span><br><span class="line">    private View mPopupView;</span><br><span class="line">    private Context mContext;</span><br><span class="line">    private String mTextColor;</span><br><span class="line">    private int mCornerRadius;</span><br><span class="line">    private int mLoadingWidth;</span><br><span class="line">    private int mLoadingHeight;</span><br><span class="line">    private int mTextMarginTop;</span><br><span class="line">    private boolean mIsFocusable;</span><br><span class="line">    private String mLoadingBgColor;</span><br><span class="line">    private PopupWindow mPopupWindow;</span><br><span class="line">    private WeakReference&lt;View&gt; mView;</span><br><span class="line">    private OnLoadingListener mListener;</span><br><span class="line"></span><br><span class="line">    private static final String DEFAULT_TEXT = &quot;加载中...&quot;; // default text</span><br><span class="line">    private static final int DEFAULT_TEXT_SIZE = 12; // default text size</span><br><span class="line">    private static final int DEFAULT_TEXT_MARGIN_TOP = 6; // default text margin top</span><br><span class="line">    private static final String DEFAULT_TEXT_COLOR = &quot;#FFFFFF&quot;; // default text color</span><br><span class="line">    private static final int DEFAULT_CORNER_RADIUS = 4; // default loading background radius size</span><br><span class="line">    private static final String DEFAULT_LOADING_BG_COLOR = &quot;#CC000000&quot;; // default loading background color</span><br><span class="line">    private static final int DEFAULT_DRAWABLE_ID = R.drawable.loading1; // default loading drawable</span><br><span class="line">    private static final int DEFAULT_GIF_WIDTH = 30; // default gif width</span><br><span class="line">    private static final int DEFAULT_GIF_HEIGHT = 30; // default gif height</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor.</span><br><span class="line">     *</span><br><span class="line">     * @param builder</span><br><span class="line">     */</span><br><span class="line">    public LoadingView(Builder builder) &#123;</span><br><span class="line">        this.mText = builder.text;</span><br><span class="line">        this.mView = builder.view;</span><br><span class="line">        this.mListener = builder.listener;</span><br><span class="line">        this.mTextSize = builder.textSize;</span><br><span class="line">        this.mTextColor = builder.textColor;</span><br><span class="line">        this.mCornerRadius = builder.cornerRadius;</span><br><span class="line">        this.mContext = builder.applicationContext;</span><br><span class="line">        this.mLoadingBgColor = builder.loadingBgColor;</span><br><span class="line">        this.mDrawableId = builder.drawableId;</span><br><span class="line">        this.mGifWidth = builder.gifWidth;</span><br><span class="line">        this.mGifHeight = builder.gifHeight;</span><br><span class="line">        this.mLoadingWidth = builder.loadingWidth;</span><br><span class="line">        this.mLoadingHeight = builder.loadingHeight;</span><br><span class="line">        this.mTextMarginTop = builder.textMarginTop;</span><br><span class="line">        this.mIsFocusable = builder.isFocusable;</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize view parameters.</span><br><span class="line">     */</span><br><span class="line">    private void initView() &#123;</span><br><span class="line">        if (mPopupView == null) &#123;</span><br><span class="line">            mPopupView = View.inflate(mContext, R.layout.popupwindow_loading, null);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mPopupWindow == null) &#123;</span><br><span class="line">            mPopupWindow = new PopupWindow(mPopupView, WindowManager.LayoutParams.MATCH_PARENT,</span><br><span class="line">                    WindowManager.LayoutParams.MATCH_PARENT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPopupWindow.setOnDismissListener(() -&gt; &#123;</span><br><span class="line">            if (mListener != null) &#123;</span><br><span class="line">                mListener.onDismiss();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());</span><br><span class="line">        // 当 mIsFocusable 为 true 时，响应返回键消失，为 false 时响应 activity 返回操作，默认为 false</span><br><span class="line">        mPopupWindow.setFocusable(mIsFocusable);</span><br><span class="line"></span><br><span class="line">        LinearLayout llLoadingBg = (LinearLayout) mPopupView.findViewById(R.id.llLoadingBg);</span><br><span class="line">        ImageView ivLoading = (ImageView) mPopupView.findViewById(R.id.ivLoading);</span><br><span class="line">        TextView tvContent = (TextView) mPopupView.findViewById(R.id.tvContent);</span><br><span class="line"></span><br><span class="line">        RelativeLayout.LayoutParams rlParams = (RelativeLayout.LayoutParams) llLoadingBg.getLayoutParams();</span><br><span class="line">        if (mLoadingWidth != -1 &amp;&amp; mLoadingHeight != -1) &#123;</span><br><span class="line">            rlParams.width = dp2px(mLoadingWidth);</span><br><span class="line">            rlParams.height = dp2px(mLoadingHeight);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            rlParams.width = RelativeLayout.LayoutParams.WRAP_CONTENT;</span><br><span class="line">            rlParams.height = RelativeLayout.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        &#125;</span><br><span class="line">        llLoadingBg.setLayoutParams(rlParams);</span><br><span class="line"></span><br><span class="line">        GradientDrawable mGroupDrawable = new GradientDrawable();</span><br><span class="line">        /*设置 Drawable 的形状为矩形*/</span><br><span class="line">        mGroupDrawable.setShape(GradientDrawable.RECTANGLE);</span><br><span class="line">        /*设置背景颜色*/</span><br><span class="line">        mGroupDrawable.setColor(Color.parseColor(mLoadingBgColor));</span><br><span class="line">        /*设置圆角大小*/</span><br><span class="line">        mGroupDrawable.setCornerRadius(dp2px(mCornerRadius));</span><br><span class="line">        llLoadingBg.setBackground(mGroupDrawable);</span><br><span class="line"></span><br><span class="line">        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) tvContent.getLayoutParams();</span><br><span class="line">        params.topMargin = dp2px(mTextMarginTop);</span><br><span class="line">        tvContent.setLayoutParams(params);</span><br><span class="line">        /*设置显示文本*/</span><br><span class="line">        tvContent.setText(mText);</span><br><span class="line">        /*设置文本大小(以 SP 为单位)*/</span><br><span class="line">        tvContent.setTextSize(TypedValue.COMPLEX_UNIT_SP, mTextSize);</span><br><span class="line">        /*设置文本颜色*/</span><br><span class="line">        tvContent.setTextColor(Color.parseColor(mTextColor));</span><br><span class="line"></span><br><span class="line">        LinearLayout.LayoutParams llParams = (LinearLayout.LayoutParams) ivLoading.getLayoutParams();</span><br><span class="line">        llParams.width = dp2px(mGifWidth);</span><br><span class="line">        llParams.height = dp2px(mGifHeight);</span><br><span class="line">        ivLoading.setLayoutParams(llParams);</span><br><span class="line">        /*加载 GIF 图片*/</span><br><span class="line">        Glide.with(mContext).load(mDrawableId)</span><br><span class="line">                .diskCacheStrategy(DiskCacheStrategy.SOURCE)</span><br><span class="line">                .into(ivLoading);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Show popupWindow.</span><br><span class="line">     */</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        dismiss();</span><br><span class="line">        if (mPopupWindow != null) &#123;</span><br><span class="line">            // 必须要 post runnable，如果在onCreate中调用则会抛：android.view.WindowManager$BadTokenException: Unable to add window -- token</span><br><span class="line">            mView.get().post(() -&gt; mPopupWindow.showAtLocation(mView.get(),</span><br><span class="line">                    Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Cancel popupWindow showing.</span><br><span class="line">     */</span><br><span class="line">    public void dismiss() &#123;</span><br><span class="line">        if (mPopupWindow != null &amp;&amp; mPopupWindow.isShowing()) &#123;</span><br><span class="line">            mPopupWindow.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Invoke on Activity onDestroy() method.</span><br><span class="line">     */</span><br><span class="line">    public void dispose() &#123;</span><br><span class="line">        if (mPopupWindow != null &amp;&amp; mPopupWindow.isShowing()) &#123;</span><br><span class="line">            mPopupWindow.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">        mPopupWindow = null;</span><br><span class="line">        if (mView != null) &#123;</span><br><span class="line">            mView.clear();</span><br><span class="line">            mView = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * PopupWindow is or not showing.</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isShowing() &#123;</span><br><span class="line">        return mPopupWindow != null &amp;&amp; mPopupWindow.isShowing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Builder inner class.</span><br><span class="line">     */</span><br><span class="line">    public static final class Builder &#123;</span><br><span class="line">        private String text;</span><br><span class="line">        private String textColor;</span><br><span class="line">        private int textSize = -1;</span><br><span class="line">        private int gifWidth = -1;</span><br><span class="line">        private int gifHeight = -1;</span><br><span class="line">        private int drawableId = -1;</span><br><span class="line">        private String loadingBgColor;</span><br><span class="line">        private int cornerRadius = -1;</span><br><span class="line">        private int loadingWidth = -1;</span><br><span class="line">        private int loadingHeight = -1;</span><br><span class="line">        private int textMarginTop = -1;</span><br><span class="line">        private boolean isFocusable = false;</span><br><span class="line">        private WeakReference&lt;View&gt; view;</span><br><span class="line">        private OnLoadingListener listener;</span><br><span class="line">        private Context applicationContext;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Constructor</span><br><span class="line">         */</span><br><span class="line">        public Builder(Context context) &#123;</span><br><span class="line">            this.applicationContext = context.getApplicationContext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set content text.</span><br><span class="line">         *</span><br><span class="line">         * @param text</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setText(String text) &#123;</span><br><span class="line">            this.text = text;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set text size.</span><br><span class="line">         *</span><br><span class="line">         * @param textSize</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setTextSize(int textSize) &#123;</span><br><span class="line">            this.textSize = textSize;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set text margin top dimen.</span><br><span class="line">         *</span><br><span class="line">         * @param textMarginTop</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setTextMarginTop(int textMarginTop) &#123;</span><br><span class="line">            this.textMarginTop = textMarginTop;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set popupWindow&apos;s focusable.</span><br><span class="line">         *</span><br><span class="line">         * @param isFocusable</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setFocusable(boolean isFocusable) &#123;</span><br><span class="line">            this.isFocusable = isFocusable;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set gif imageView width.</span><br><span class="line">         *</span><br><span class="line">         * @param gifWidth</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setGifWidth(int gifWidth) &#123;</span><br><span class="line">            this.gifWidth = gifWidth;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set gif imageView height.</span><br><span class="line">         *</span><br><span class="line">         * @param gifHeight</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setGifHeight(int gifHeight) &#123;</span><br><span class="line">            this.gifHeight = gifHeight;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set gif loadingView width.</span><br><span class="line">         *</span><br><span class="line">         * @param loadingWidth</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setLoadingWidth(int loadingWidth) &#123;</span><br><span class="line">            this.loadingWidth = loadingWidth;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set gif loadingView height.</span><br><span class="line">         *</span><br><span class="line">         * @param loadingHeight</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setLoadingHeight(int loadingHeight) &#123;</span><br><span class="line">            this.loadingHeight = loadingHeight;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set text color.</span><br><span class="line">         *</span><br><span class="line">         * @param textColor</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setTextColor(String textColor) &#123;</span><br><span class="line">            this.textColor = textColor;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set loadingView corner radius.</span><br><span class="line">         *</span><br><span class="line">         * @param cornerRadius</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setCornerRadius(int cornerRadius) &#123;</span><br><span class="line">            this.cornerRadius = cornerRadius;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set loadingView background color.</span><br><span class="line">         *</span><br><span class="line">         * @param loadingBgColor</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setLoadingBgColor(String loadingBgColor) &#123;</span><br><span class="line">            this.loadingBgColor = loadingBgColor;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set gif drawable resource.</span><br><span class="line">         *</span><br><span class="line">         * @param drawableId</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setGifDrawable(int drawableId) &#123;</span><br><span class="line">            this.drawableId = drawableId;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Set location at parent view, because popupWindow must be dependency activity.</span><br><span class="line">         *</span><br><span class="line">         * @param view</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setDropView(View view) &#123;</span><br><span class="line">            if (view != null) &#123;</span><br><span class="line">                this.view = new WeakReference&lt;&gt;(view);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;must be point parent view!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * set on popupWindow dismiss listener.</span><br><span class="line">         *</span><br><span class="line">         * @param listener</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        public Builder setListener(OnLoadingListener listener) &#123;</span><br><span class="line">            this.listener = listener;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public LoadingView build() &#123;</span><br><span class="line">            if (TextUtils.isEmpty(text)) &#123;</span><br><span class="line">                text = DEFAULT_TEXT;</span><br><span class="line">            &#125;</span><br><span class="line">            if (textSize == -1) &#123;</span><br><span class="line">                textSize = DEFAULT_TEXT_SIZE;</span><br><span class="line">            &#125;</span><br><span class="line">            if (textMarginTop == -1) &#123;</span><br><span class="line">                textMarginTop = DEFAULT_TEXT_MARGIN_TOP;</span><br><span class="line">            &#125;</span><br><span class="line">            if (TextUtils.isEmpty(textColor)) &#123;</span><br><span class="line">                textColor = DEFAULT_TEXT_COLOR;</span><br><span class="line">            &#125;</span><br><span class="line">            if (TextUtils.isEmpty(loadingBgColor)) &#123;</span><br><span class="line">                loadingBgColor = DEFAULT_LOADING_BG_COLOR;</span><br><span class="line">            &#125;</span><br><span class="line">            if (cornerRadius == -1) &#123;</span><br><span class="line">                cornerRadius = DEFAULT_CORNER_RADIUS;</span><br><span class="line">            &#125;</span><br><span class="line">            if (view == null) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;must be point parent view!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (drawableId == -1) &#123;</span><br><span class="line">                drawableId = DEFAULT_DRAWABLE_ID;</span><br><span class="line">            &#125;</span><br><span class="line">            if (gifWidth == -1) &#123;</span><br><span class="line">                gifWidth = DEFAULT_GIF_WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            if (gifHeight == -1) &#123;</span><br><span class="line">                gifHeight = DEFAULT_GIF_HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            return new LoadingView(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * dp convert to px.</span><br><span class="line">     *</span><br><span class="line">     * @param dpValue</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private int dp2px(float dpValue) &#123;</span><br><span class="line">        float scale = mContext.getResources().getDisplayMetrics().density;</span><br><span class="line">        return (int) (dpValue * scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Define popupWindow dismiss listener.</span><br><span class="line">     */</span><br><span class="line">    interface OnLoadingListener &#123;</span><br><span class="line">        void onDismiss();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-用法"><a href="#3-用法" class="headerlink" title="3.用法"></a>3.用法</h2><h3 id="3-1初始化Loading"><a href="#3-1初始化Loading" class="headerlink" title="3.1初始化Loading"></a>3.1初始化Loading</h3><p>1.最基本的用法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 因为 PopupWindow 依赖于Activity，所以必须要调用 setDropView 方法设置要挂载的 View，</span><br><span class="line">// 一般是 Activity 或 Fragment 的根 View，其他参数可根据需求进行设置。</span><br><span class="line">mLoadingView = new LoadingView.Builder(this)</span><br><span class="line">        .setDropView(activity_main)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>2.自定义设置各种参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mLoadingView = new LoadingView.Builder(this)</span><br><span class="line">        .setText(&quot;拼命加载中...&quot;) // 设置文案</span><br><span class="line">        .setTextSize(12) // 设置字体大小(sp)</span><br><span class="line">        .setTextColor(&quot;#FFFFFF&quot;) // 设置字体颜色(#RGB &amp; #ARGB)</span><br><span class="line">        .setTextMarginTop(10) // 设置文字距上的距离(dp)</span><br><span class="line">        .setCornerRadius(4) // 设置圆角半径(dp)</span><br><span class="line">        .setLoadingBgColor(&quot;#CC000000&quot;) // 设置背景颜色(#RGB &amp; #ARGB)</span><br><span class="line">        .setLoadingWidth(120) // 设置 loading 的宽(dp)</span><br><span class="line">        .setLoadingHeight(100) // 设置 loading 的高(dp)</span><br><span class="line">        .setListener(listener) // 设置监听</span><br><span class="line">        .setDropView(activity_main) // 设置要挂载的 View(必须要设置)，一般是 Activity 或 Fragment 的根 View</span><br><span class="line">        .setGifDrawable(R.drawable.loading4) // 设置 gif 资源</span><br><span class="line">        .setFocusable(false) // 为 true 时，响应返回键消失，为 false 时响应 activity 返回操作，默认为 false</span><br><span class="line">        .setGifWidth(16) // 设置 gif 的宽(dp)</span><br><span class="line">        .setGifHeight(16) // 设置 gif 的高(dp)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><h3 id="3-2-显示Loading"><a href="#3-2-显示Loading" class="headerlink" title="3.2 显示Loading"></a>3.2 显示Loading</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mLoadingView.show();</span><br></pre></td></tr></table></figure><h3 id="3-3-取消Loading"><a href="#3-3-取消Loading" class="headerlink" title="3.3 取消Loading"></a>3.3 取消Loading</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mLoadingView.dismiss();</span><br></pre></td></tr></table></figure><h2 id="4-支持的自定义设置"><a href="#4-支持的自定义设置" class="headerlink" title="4.支持的自定义设置"></a>4.支持的自定义设置</h2><ul><li>支持设置字体文案、及颜色和字体的大小；</li><li>支持设置文字距上的边距；</li><li>支持设置Loading的宽高；</li><li>支持设置Loading的圆角半径及背景颜色；</li><li>支持设置Loading的监听；</li><li>支持设置加载其他gif资源；</li><li>支持设置gif图片显示的宽高；</li><li>支持设置Loading的焦点；</li><li>…</li></ul><p>好了，今天的分享就到这里，需要下载 Demo 的请点击 「阅读原文」！</p><p><strong>猜你喜欢：</strong><br><a href="https://mp.weixin.qq.com/s/jxBEg7dpFfTNLXNFdvJjrw" target="_blank" rel="noopener">深入浅出Retrofit2.x(一)</a><br><a href="https://mp.weixin.qq.com/s/c8mdMqjrLvHTgc8oxONiCw" target="_blank" rel="noopener">深入浅出Retrofit2.x(二)</a><br><a href="https://mp.weixin.qq.com/s/H8WqFy2RPYZWRpp63oBPfQ" target="_blank" rel="noopener">不得不会的10点Java基础知识</a><br><a href="https://mp.weixin.qq.com/s/hVhhDdr3Bo4qLIdOkHsM_Q" target="_blank" rel="noopener">Android 最全 Intent 传递数据姿势</a> </p><p><img src="http://pcobk8jbf.bkt.clouddn.com/Fr_08YggSBgBwGhjjZsX8bH8JYNR" alt=""></p><center><span style="color:#bdbdbd;">欢迎扫码关注我的公众号</span></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;点击上面蓝色字体关注&lt;span style=&quot;color:#0000ff;&quot;&gt;“IT大飞说”&lt;/span&gt;&lt;/center&gt;&lt;center&gt;置顶公众号（&lt;strong&gt;ID：ITBigFly&lt;/strong&gt;）第一时间收到推送&lt;/center&gt;

&lt;p&gt;&lt;img 
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Loading" scheme="http://www.x-sir.com/tags/Loading/"/>
    
      <category term="View" scheme="http://www.x-sir.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>最接地气的 Android 面经总结</title>
    <link href="http://www.x-sir.com/2018/07/08/%E6%9C%80%E6%8E%A5%E5%9C%B0%E6%B0%94%E7%9A%84Android%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://www.x-sir.com/2018/07/08/最接地气的Android面经总结/</id>
    <published>2018-07-08T15:47:57.000Z</published>
    <updated>2018-12-08T15:07:56.503Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于个人原因，从北京转战上海来工作，从来到上海到找到工作差不多经历了一周的时间，接下来我会将面试的准备及过程中的一些问题，还有一些注意的点与大家进行分享。</p></blockquote><h2 id="1-面试准备"><a href="#1-面试准备" class="headerlink" title="1.面试准备"></a>1.面试准备</h2><p>面试的准备特别重要，一方面的话先需要把面试时一些常问的知识点必须要搞清楚，一些基础知识也要过一下。因为我当时人还没到上海，打算的是周日晚上到上海，然后周一开始面试，所以我是提前投了一些简历，然后已经排了几家公司的面试，从周一一直往后排，每天至少有一家公司的面试机会，等到来上海之后就可以直接去面试了。你到上海来之后肯定需要找一个落脚的地方，你可以先找朋友那边先暂住一下，或者是找一些可以短租的 APP，我是不太建议到朋友哪里住，因为朋友的话，见了面肯定会一起吃吃饭、聊聊天，因为长时间不见可能会聊个没完没了。如果朋友上班的话，也会影响上班，也不方便自己做一些面试准备什么的。为什么要推荐短租 APP 呢？因为我之前想着也是住酒店，然后我在网上查了一下价格，一线城市的酒店确实比较贵，而短租 APP 上的房子住一晚上平均也就 100 多，价格上比较划算，基本上都是民宿的房子，个人的房子比较多一些，我找的还算可以把，比较安静，睡着也比较舒服吧，另外也可以做一些面试前的准备。</p><p>在这期间也陆续接到好多公司的面试电话，基本上，我每天都是安排两家公司去面试，上午一家，下午一家，我建议不要安排太多，因为安排太多可能会导致时间比较紧张，有可能两家面试的公司距离比较远，你要面试完一家又要赶去另一家，所以我觉得每天面两家公司比较合理一些，也比较轻松一些吧。在面试的前一天晚上，你需要查一下去面试公司的路线，公交或者地铁，我建议能坐地铁的还是坐地铁吧，公交有时候会堵车，到时候堵车了你干急也没什么办法；然后我建议面试尽量提前半个小时到，这样不仅可以应对一些突发情况导致耽误时间，另一方面可以给面试的公司留下一个比较好的印象，然后计算好路程的花费时间，定好闹钟，然后就早早休息。另外还需要准备一些东西，如充电宝、纸巾、水等。充电宝的话用处就比较大了，因为你面试的时候一般都是通过手机去查路线导航过去的，所以手机也比较费电，这样可以防止手机没电，找不到地方影响面试，另外在公交或地铁上也会用手机，我一般在路上喜欢听歌，然后看一些面试题或者一些问题，听歌可以舒缓一下心情，其实，只要你准备的比较充分了，自然也就没什么可紧张的了。</p><h2 id="2-公司筛选"><a href="#2-公司筛选" class="headerlink" title="2.公司筛选"></a>2.公司筛选</h2><p>一般在面试时，我们会在好几个平台投递简历，我一般喜欢用 智联、拉钩、BOSS 等平台，期间你会接到好多公司的面试邀请电话，这些公司大都参差不齐，所以我们需要做一些筛选。这样我们就可把精力放在你中意的公司，不中意的就没有必要去面试浪费时间了。大致上，基本可以分为以下几类：初创公司、外包公司、创业了几年的公司、还有一些上市公司。由于我之前的公司就是创业公司，被坑了，所以这次果断把创业公司给筛掉了，另外一个就是外包公司了，我基本也是拒绝的，因为外包的话，好多打电话过来说是外派性质的，这种的话一是钱给不到位，另一个就是不稳定，有的明确说了，说项目干完之后自己安排工作，相当于干完活把你就扔了，基本上其他福利待遇也没有，工作时你会感觉两边不是人吧。所以我建议大家还是找相对发展成熟一点的公司吧，这样的公司工资还有其他福利待遇方面也是有保障的。另一个筛选的条件就是根据自己喜欢和擅长的方向来选一些公司，最好还是选一些有自己产品或者做自己产品的公司比较好，最好的是产品已经上市并且有一定的用户量，这样的产品算是比较成熟了，也相对有发展前途。</p><h2 id="3-面试过程"><a href="#3-面试过程" class="headerlink" title="3.面试过程"></a>3.面试过程</h2><p>一般你到面试的公司，都会先让你填写一张应聘人员登记表，主要包含一些个人信息，工作经历、期望薪资等信息，我认为这个只是走个流程，一些个人信息完全没必要写的很详细，一是因为你还不一定到这个公司工作，另外一些个人信息简历中也是有的，不想填的可以不用填的太仔细。</p><p>一般面试的话，先是技术面你，也就是将来和你一起工作的同事面你，一般也会问一些比较细致的技术问题，和开发中比较常见的一些问题，基本都是比较基础的东西，没有太大难度，如果你们聊的可以的话，接下来的就是技术主管来面你。</p><p>主管的话，基本不会问太具体的技术点，大多会问你们开发中如何协作，如何解决问题等一些比较常见的问题，则更多的是看中你的表达能力，解决问题的能力及你的沟通协作能力，我觉得和主管聊的话，首先要有礼貌，不要打断他的讲话，另外一个就是要表现的比较自信，有活力一些，这样才能留一个好印象，更多的就是聆听吧，不要怼就行了。如果主管觉得满意的话，最后他会让人事和你谈薪资及待遇情况。</p><p>我第一家面试的公司是一个创业公司，严格说是一个建筑公司旗下的子公司，相当于母公司的研发团队，子公司服务于母公司，面试的时候先是技术的面，问了一些简单的技术问题，没有什么深度，然后他觉得我还可以，我时不时的也反问他一些问题，他可能感觉到有些被我的一些问题给问住了，然后就对我说，你这3、5年工作经验的也没啥可问的，问基础就有些太没意思了，他就撤了。我建议大家在面试的时候不要一味的被别人带领着走，你也可以适当的找机会去询问他一些问题，将带领全掌握在自己的手中，这样你可以往你比较擅长的地方扯了。</p><p>然后是技术老大面，他看着我的简历问了一些开发中的问题，以及做项目的情况，也基本没啥深度和难度，过了一会，他去找人事谈了一下，然后他回来就开始跟我谈薪资了，我靠，这速度有点快呀！慌得一批。。。 因为我之前做的东西也是比较偏硬件的，然后和他们公司做的东西也是比较接近的，然后他就直接和我谈薪资了，想录用我，这种情况下，我就不急了，因为决定权现在在自己手里，这时候工资建议大家要高一些。然后他又跟我谈各种福利待遇啥的，因为是创业公司嘛，我就知道一些福利待遇啥的基本没有，和他在谈话的过程中，了解到公司的技术团队都还没有招齐，谈话过程中听他说的意思就是创业公司，加班还是要加的，但是福利待遇因为公司制度问题，现在什么都没有，也就是说白加班，还说没有的都没有，大家都一视同仁，狗屁啊，跟我谈什么公平？我又不是免费的劳动力，凭什么啊！心里顿时有一万句：“mmp”，接下来就是大部分创业公司骗人的小把戏，专业画饼，给你画未来的大饼，各种福利待遇，肯定不会亏待你的，其他公司有的我们也都有，然后就是期权、股份等这些东西，这些可能对于刚工作的小伙伴可能能骗的了，对于工作几年的人来说，基本都不吃这一套，都是嘴上功夫。立马对这家公司没了兴趣，然后问我什么时候来上班，要跟我确定一下，我也有些不耐烦了，就说我回去再想一下再回复你吧，我推辞说我还有其他面试，然后就走了。到了下午，人事发消息问我，我直接果断给拒了，这种创业公司很明显不靠谱，建议大家不要犹豫，工资给的再高，也不要去！都是血淋淋的教训。</p><p>然后第二家公司面试的是一家上市公司，主要是做医疗方面的，公司也比较大，面我的是一个Android 工程师和技术主管，问的问题也是一些面试中频率比较高的问题，例如 Handler 机制、自定义 View 等，难度一般，还有一些开发中常见的问题，回答的中规中矩吧，有几个问题我自认为回答的不是很好，面完之后给我说，让我等消息吧，他说 3-5 天内给我答复，一般来说，这种话大部分情况下也就是没戏，只是没有当面拒绝你而已，我也感觉也是 GG 了，结果等到下午的时候，他们又联系我了，跟我谈了一下待遇，问我什么时候来上班，感觉有点意外，就这样这家公司决定录用我了。</p><p>第三家面试的公司是一家中型的公司，先是让我做了一份笔试题，还有一些情景测试类的题目，笔试题也比较简单，做完之后等了一会，然后是技术面，一个做 Android 的哥们，应该比我也大不了几岁，看着我的简历，问了我一些技术问题，也比较简单，我们之间聊得也比较轻松、愉快，更多的是相互交流不像是面试，这样使我们双方都比较轻松，我认为好的面试应该就是这样的，相互之间交流，交流的过程中穿插着一些技术的问题，我不喜欢一问一答那种比较刻板的面试方式。最后他感觉我还可以，我等了一会，接下来是技术主管面，技术主管是一个比较幽默的人，从一开口到面试的过程中，他的幽默会时不时的把你逗笑，面试的气氛也轻松、愉快，但是具体的技术问题他也会穿插着问一些，总的来说，感觉他和大部分的技术人不太一样，情商比较高，特别会说话，能感觉到你情绪的变化，然后适当的调节面试的气氛，而且技术层面也都问到了，从交流的过程中，了解到他是一个十几年的老程序员了，因为从他们那个年代过来的程序员基本都是从底层到上层，从软件到硬件，编程语言至少也会十几种，从汇编到高级语言，所以从他们的技术高度层面来看我现在简历上的很多技术，说白了就是会使用开发工具、会调用 api 而已，不懂底层，说白了其实没有啥技术含量，确实我也感觉到了一些不足的地方，例如没有核心竞争力，当然他也给我了一些建议，中间我们也聊了很多，给我指点了很多，确实我从这次面试中，感受到一些不一样的想法，让我更加了解到了自己的不足，让我受益匪浅。后来他看我也比较实在，然后就跟我谈了一下工资待遇啥的，谈完之后，问我什么时候来上班，我说我回去考虑一下吧，然后我就走了。总体来说还算比较满意吧，除了工资给的低一点。</p><p>后续，我又面了两家公司，一家公司面了几分钟不到就走人了(一个十几年经验的老鸟问了我几个比较深的问题，都没有答上来)，说是让我等消息，其实也就是 GG 了。另一家公司还可以，不论从公司的环境还是其他方面都还可以，公司有自己成熟的产品，看了他们的 APP 也没什么技术难度，3 个人开发一个APP，平时估计也是比较闲的那种，后来聊的也比较满意，最后让我去，我后来考虑了一下，没有接受，一方面是考虑到技术提升不是很大，另一方面因为比较闲到时候怕会废掉，所以就没去。</p><p>3 天内总共面试了 5 家，成了 4 家，还算可以，我目前选了一个比较稳定的公司。</p><h2 id="4-如何谈薪"><a href="#4-如何谈薪" class="headerlink" title="4.如何谈薪"></a>4.如何谈薪</h2><p>一般情况下，公司招聘的岗位它会有一个薪资的范围，另外一个就是面试过程中，会根据你的表现及回答问题等也会有个基本的薪资定位，技术一般也会给人事参考。所以，你和人事在谈的时候你心里也肯定比较清楚自己的期望薪资及自己面试时的表现，一般来说，你第一口说出的薪资特别重要，所以，当你说完之后基本就可以理解为是你要的工资的顶端了，这个时候如果你要往上加的话就比较困难了，所以说，能要高点还是尽量往高要，如果公司决定要你了，这些都是可以谈判的，大不了都让步一下，你拿到手的工资也是应该让你比较满意的，另外你也可以问一下人事，公司的福利待遇及补助的情况，有的公司工资虽说比其他公司稍微低一点，但是其他待遇方面就比较优厚了，你可以对比一下，也要问清楚年终奖等福利，还有就是五险一金等缴纳的基数不同，拿到手的工资也不同，有的公司是按最低基数交的，有的公司是按全额交的，这样你就可以大致算出自己的薪资了，以便于自己更好的比较和做决定！</p><p>另外，谈工资的时候最好不要含糊，不要觉得不好意思，建议大家还是要个具体的数字，尽量往高要，但不那种离谱的高，在自己能力水平工资的基础上高一些就行了，不要给一个范围，更不要说就按市场水平给吧，因为市场水平的有高有低，到时候按最低的发给你就傻了！</p><h2 id="5-面试总结"><a href="#5-面试总结" class="headerlink" title="5.面试总结"></a>5.面试总结</h2><p>从这几天面试的过程来看，也发现了一些问题，对于个人来说，必须要有自己的核心竞争力，也就是说某一项技能特别强或者精通，或者说别人没有的技能而你有，这样你就可以在面试的时候比别人更有竞争力了，当然也可以要一个好价钱！另外一方面我们在自己的技术领域必须要深入学习，多了解一些底层的原理机制，多阅读一些源码，了解其设计的思想。另外最好利用空闲时间学一些其他的开发语言或者是技能，不要局限于自己的领域，这样如果以后这个技能没饭吃了，可以有其他技能混口饭吃，也就是说需要培养自己的第二技能，不断拓展自己的技术栈。</p><p>好了，今天就分享这么多，如果大家有什么好的想法都可以在下方评论与我交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于个人原因，从北京转战上海来工作，从来到上海到找到工作差不多经历了一周的时间，接下来我会将面试的准备及过程中的一些问题，还有一些注意的点与大家进行分享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-面试准备&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Android" scheme="http://www.x-sir.com/tags/Android/"/>
    
      <category term="Interview" scheme="http://www.x-sir.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>不得不会的10点Java基础知识</title>
    <link href="http://www.x-sir.com/2018/06/23/%E4%B8%8D%E5%BE%97%E4%B8%8D%E4%BC%9A%E7%9A%8410%E7%82%B9Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.x-sir.com/2018/06/23/不得不会的10点Java基础知识/</id>
    <published>2018-06-23T05:47:57.000Z</published>
    <updated>2018-12-08T14:28:53.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实例变量和类变量"><a href="#1-实例变量和类变量" class="headerlink" title="1.实例变量和类变量"></a>1.实例变量和类变量</h3><p>实例变量：指每个对象独立的，修改其中一个对象的实例变量，不会影响其他实例变量的值，变量值无 <strong>static</strong> 关键字修饰；</p><p>类变量：是指所有对象共享的，其中一个对象把该变量的值修改了，那么所有对象的该变量的值都修改了，使用 <strong>static</strong> 关键字修饰，一般使用 「类名.属性」 来访问；</p><h3 id="2-静态方法和非静态方法"><a href="#2-静态方法和非静态方法" class="headerlink" title="2.静态方法和非静态方法"></a>2.静态方法和非静态方法</h3><p>静态方法：是指使用 <strong>static</strong> 关键字修饰修饰的方法，一般使用 「类名.方法」 来访问，也可以通过 「对象.方法」 来访问，但是不建议这样写！静态方法中只能调用静态方法和使用静态成员，因为静态成员和静态方法会随着类的加载而加载，非静态成员或者方法的加载晚于静态的成员和方法，故静态方法不能调用非静态的方法和非静态的成员，即静态的对静态的；</p><p>非静态方法：是指没有使用 <strong>static</strong> 关键字修饰修饰的方法，一般使用 「对象.方法」 来访问，非静态方法中即可调用非静态方法和使用非静态成员也可以调用静态方法和使用静态成员；</p><h3 id="3-Java-中包的作用"><a href="#3-Java-中包的作用" class="headerlink" title="3.Java 中包的作用"></a>3.Java 中包的作用</h3><p>在 Java 中，包的声明一般写在文件的第一行，使用关键字 <strong>package</strong> + 包名，其作用有：①避免重名，例如我们有时候在调用某个类的某个方法时会发现会有相同类名的方法，这时候你就要导入你要调用的类所在的包或者使用全类名调用即可，这样避免了重名；②用于权限控制，在同一个包下的类是可以相互调用的，如果调用其他包下的类，就必须要导入调用类所在的包，这样可以避免外部的非法调用，另外还可以合理的使用访问控制权限的关键字 <strong>public、protected、private</strong> 来进行访问权限的设置（更多各关键字权限控制参考附表1）；③划分项目结构层次，使得文件管理更有条理，例如MVC、MVP模式分包；</p><p><img src="https://img-blog.csdn.net/20180622152533284?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnBlbmdmZWk1MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="附表1"></p><h3 id="4-Java-中的静态导入"><a href="#4-Java-中的静态导入" class="headerlink" title="4.Java 中的静态导入"></a>4.Java 中的静态导入</h3><p>静态导入是 JDK1.5 引入的新特性，一般情况下，我们调用某个类中的静态成员或静态方法使用 「类名.属性」 来调用，而静态导入可以把某个类下的静态成员(方法和变量)使用类似导包的方式导入进来，即可以直接导入到类的成员级别(方法和变量)，这样可以使被导入类的静态变量和静态方法在当前类直接可见，使用这些静态成员无需使用 「类名.属性」 的方式来调用，直接调用方法名或者属性，像调用自己类中的方法和属性一样简单。</p><p>静态导入的语法是： </p><ul><li>import static 包名.类名.静态成员变量;   </li><li>import static 包名.类名.静态成员函数; </li></ul><p>注意导入的是静态成员变量和方法名，另外也可导入某个类下的所有静态成员：</p><ul><li>import static 包名.类名.*;</li></ul><p>*号代表通配所有。</p><p>一般情况下我们可以适度的使用静态导入，不建议大量滥用，因为我们知道 Java 是面向对象的语言，使用静态导入调用时，缺少了类名，即弱化了类的描述，有时候我们不知道调用的是哪个类的成员，可能还会思考一番，弱化了面向对象思想，导致类和类之间的调用关系不清晰！</p><h3 id="5-Java-中的-this-关键字"><a href="#5-Java-中的-this-关键字" class="headerlink" title="5.Java 中的 this 关键字"></a>5.Java 中的 this 关键字</h3><p>在 Java 中，当创建一个对象后，Java 虚拟机就会为其分配一个指向对象本身的指针，这个指针就是 <strong> this</strong> 。this 的使用场景：①当方法的布局变量和与实例变量重名时，需要使用 <strong>this</strong> 关键字来区分，如果不重名也可以使用，通常不重名的情况下不写 this；②使用 <strong>this.方法名(参数);</strong> 来调用类的成员方法，一般情况下不写 this，直接调用；③使用 <strong>this(参数1…);</strong> 来调用本类中的其他构造方法，例如在 Android 中自定义一个 View，一般都会写 3 个重载的构造方法，单参数的构造方法中使用 <strong>this(参数1, 参数2);</strong> 来调用双参数的构造方法，双参数的构造方法中调用三个参数的构造方法；④ this 作为参数传递，在 Android 的 Activity 中，经常会使用 this 来作为参数传递；⑤在内部类或者匿名内部类中调用外部类的方法，如果在内部类中使用 this，这里的 this 代表的是当前类本身，即内部类，要想调用外部类中的方法必须使用 <strong>外部类名.this.方法名();</strong> 来调用；</p><p>另外使用this关键字要注意一下几点：</p><ul><li>在构造方法中使用 this 调用另一构造，必须要将调用放在方法的第一句且只能使用一次；</li><li>不能再实例方法中使用this 来调用构造，因为实例方法的调用必须要有对象，而对象的创建一定会调用构造方法，构造方法的调用应早于实例方法；</li><li>在构造中不能使用 this 来相互调用构造，例如，如果在单参数的构造中调用双参数的构造，在双参数的构造中调用单参数的构造，我们使用单参数的构造来创建一个实例，调用过程为：单参数构造 -&gt; 双参数构造 -&gt; 单参数构造，这样会无穷无尽的调用下去，另外这违背了在一个方法的调用链中只能调用一次同一个参数的构造方法的规则；</li></ul><h3 id="6-Java-中的-super-关键字"><a href="#6-Java-中的-super-关键字" class="headerlink" title="6.Java 中的 super 关键字"></a>6.Java 中的 super 关键字</h3><ul><li><strong>super();</strong> 调用的父类是 Object的无参构造，默认自动调用，一般情况下都省略不写；</li><li>this 和 super 关键字都是为了解决重名问题的，如果没有重名问题可以省略不写；</li><li>this 和 super 都可以理解为父类的一个引用，即可以调用父类中的属性和方法；</li><li><strong>super.方法名();</strong> 表示调用父类的方法；</li><li><strong>super.属性</strong> 表示调用父类中的属性(用的不多)；</li><li><strong>super();</strong>调用父类的构造方法；</li><li>this 和 super 都只能放在方法的第一行，所以不能一起出现；</li><li>super 只能出现在构造方法中；</li></ul><p>在 Java 中，所有类的父类都是 Object，如果一个类没有使用 <strong>extends</strong> 关键字来继承父类，那么它默认继承的是 Object 类，子类不会继承父类的构造方法，但是一定会调用父类的构造方法，如果没有调用，必须要手动去调用，否则会编译报错；</p><h3 id="7-Java-中的重载与重写"><a href="#7-Java-中的重载与重写" class="headerlink" title="7.Java 中的重载与重写"></a>7.Java 中的重载与重写</h3><p>重载即 Overload，在同一个类中，方法名相同参数列表不同的几个方法称为重载方法；</p><p>重写即 Override，在子父类中，子类与父类方法名称相同，参数列表必须相同；对于返回值类型子类要么和父类的一致，要么是父类返回值类型的子类；对于权限修饰符，子类的权限修饰符要么和父类的相同，要么比父类的权限修饰符更宽泛；如果有异常抛出，子类的异常捕获范围要么和父类的相同要么比父类的异常范围更小，即子类的异常是父类异常的子类；</p><h3 id="8-与-equals"><a href="#8-与-equals" class="headerlink" title="8.== 与 equals"></a>8.== 与 equals</h3><p>关系操作符 “==” 生成的是一个boolean结果，它们计算的是操作数的值之间的关系，如果是基本数据类型，它比较的是他们值的本身，如果是引用数据类型，则比较的是对象在内存中的地址；</p><p>equals 方法是基类 Object 中的方法，所有类都直接或间接继承于 Object类，因此所有类中都有该方法，如果没有重写 <strong>equals()</strong> 方法，调用 <strong>equals()</strong> 方法和使用 <strong>==</strong> 的效果一样，也是比较的内存中的地址值；在 Java 提供的大多数类中，如 String，Double，Date，Integer等，都对equals 方法进行了重写，用来比较指向的对象所存储的内容是否相等，如果是我们自己的定义的类，如果没有重写 equals 方法，使用 equals 默认比较的是对象在内存中的地址，要比较内容，就必须要重写 equals 方法。</p><h3 id="9-对类的理解"><a href="#9-对类的理解" class="headerlink" title="9.对类的理解"></a>9.对类的理解</h3><p>类是对一类事物的抽象描述，对象是类的实例，可以理解为类是汽车设计图，对象是实实在在的生产出来的汽车，一张设计图(类)可以生产出来多个汽车(对象)，类中包含属性和方法，属性描述了类所具有的特性，方法描述了类的具体功能，这样我们在设计类的时候就会更加注重某个类中的功能及特性，将他们抽象分装到类中，外部在调用的时候不需要关心类中的具体实现，这样就可以更多的考虑类与类之间的相互关系了，这样带来的好处就是可以提高对象的复用性，降低开发难度，多以所Java是面向对象的编程，即Everything is object. 对于面向对象的开发，一般来讲分为三个步骤：OOA（面向对象分析）、OOD（面向对象设计）、OOP（面向对象编程）。OOA 即根据具体的功能分析有哪些特性或者方法，OOD 即根据特性和方法抽象设计出具体的类；OOP 即建立类和类之间的相互调用的关联关系。</p><h3 id="10-变量、内存和垃圾"><a href="#10-变量、内存和垃圾" class="headerlink" title="10.变量、内存和垃圾"></a>10.变量、内存和垃圾</h3><p>变量是内存中的一块存储区域，它的值是变化的，不是固定的;</p><p>Java中的内存一般分为Java虚拟机栈和堆内存，栈中一般存放的是基本数据类型和引用类型的引用变量，堆内存中存放的是对象实例，Java堆是 Java 虚拟机所管理的内存中最大的一块，它是被所有线程共享的一块内存区域，在虚拟机启动时创建，可以不是物理上的连续区域，只要逻辑上连续即可；另外还有方法区、静态常量池、程序计数器、本地方法栈等内存分配区域的概念；</p><p>垃圾：指的是没有任何引用所指向的对象(一块堆内存空间)，这块空间就是垃圾，所有的垃圾都会等待GC（垃圾收集器）不定期的回收(释放内存空间)。</p><p>更多干货文章关注我的微信公众号：</p><p><img src="https://img-blog.csdn.net/20180622152651938?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnBlbmdmZWk1MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-实例变量和类变量&quot;&gt;&lt;a href=&quot;#1-实例变量和类变量&quot; class=&quot;headerlink&quot; title=&quot;1.实例变量和类变量&quot;&gt;&lt;/a&gt;1.实例变量和类变量&lt;/h3&gt;&lt;p&gt;实例变量：指每个对象独立的，修改其中一个对象的实例变量，不会影响其他实例变量
      
    
    </summary>
    
      <category term="Java" scheme="http://www.x-sir.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.x-sir.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>iTunes备份到电脑 F 盘</title>
    <link href="http://www.x-sir.com/2018/05/24/iTunes%E5%A4%87%E4%BB%BD%E5%88%B0%E7%94%B5%E8%84%91F%E7%9B%98/"/>
    <id>http://www.x-sir.com/2018/05/24/iTunes备份到电脑F盘/</id>
    <published>2018-05-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:34:51.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://pcobk8jbf.bkt.clouddn.com/FjgMQjc2POpMDyrU0ZDUXqjukgAE" alt=""></p><p>默认情况下，iTunes 会备份到电脑的 C 盘，当 C 盘快满的时候，iTunes 老是提醒空间不足，导致备份失败，iTunes 也不可以设置将其备份到其他盘，但是我们可以想办法将其备份到其他盘，以前 Android 手机刚出来的时候，我们的手机配置都比较低，后来由于 APP 越来越大，装的越来越多，后来导致内存不足，安装不了应用，后来使用终端命令 <code>ln -s</code> 将  APP 安装目录映射（软连接） <code>/data/app/</code> 到 SD 卡的某个目录，这样就解决了内存不足的情况，实现软件装到的是 SD 的目录，主要讲 SD 分出一部分格式化成 ext 日志文件系统，我们都知道 SD 卡都有寿命的，即读写的次数是有限的，这样做会降低手机 SD 卡的寿命，但是没关系，我们用时间换空间。</p><p>继续文章开头的问题，我们想 iTunes 的备份目录是不是也可以这样做呢？答案是可以的。</p><p>我们找到默认的 iTunes 的备份目录：</p><p>我的是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\Apple Computer\MobileSync\Backup\</span><br></pre></td></tr></table></figure><p>在 Backup 目录下你会看到已经备份的一些文件，没关系，我们在其他盘新建一个文件夹，例如就叫：”F:\iTunes_backup” 吧，我们可以先将原来目录备份的文件移动到新建的目录下面，因为这样的话之前已经备份的还在，再次备份时就不用子再从 0 开始备份了，然后我们使用快键键：win + R 打开 window 运行，输入 cmd 打开 ms shell ,输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /D &quot;C:\Users\Administrator\AppData\Roaming\Apple Computer\MobileSync\Backup&quot; &quot;F:\iTunes_backup&quot;</span><br></pre></td></tr></table></figure><p>然后回车，即建立目录映射链接，相当于是一个快捷方式。</p><p>如果执行命令的时候提示 “当文件已存在时，无法创建该文件。”</p><p>意思就是已经存在 Backup 目录了，所以先应该把原目录的Backup 目录删掉，因为这个链接就是要创建一个快捷方式，然后再次执行即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://pcobk8jbf.bkt.clouddn.com/FjgMQjc2POpMDyrU0ZDUXqjukgAE&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，iTunes 会备份到电脑的 C 盘，当 C 盘快满的时候，iTunes 老是提醒空间
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="iTunes" scheme="http://www.x-sir.com/tags/iTunes/"/>
    
      <category term="Windows" scheme="http://www.x-sir.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 重置 MySQL 8.0 密码</title>
    <link href="http://www.x-sir.com/2017/12/24/CentOS7%E9%87%8D%E7%BD%AEMySQL8.0%E5%AF%86%E7%A0%81/"/>
    <id>http://www.x-sir.com/2017/12/24/CentOS7重置MySQL8.0密码/</id>
    <published>2017-12-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:33:39.039Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章我们已经讲完了 MySQL 的安装，本篇接下来将一下如何重置密码。</p><p>1.查看自动生成的密码</p><p>安装完成后 MySQL会给我们自动生成一个随机密码</p><p>查看命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>因为自动的生成的密码无法直接使用，也不便于我们记忆，所以我们要修改密码。</p><p>2.配置文件 MySQL 免密码登录</p><p>编辑 MySQL 的配置文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在 pid 开头的下面一行加入下面这句 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>保存并退出。</p><p>3.重启 MySQL 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>4.免密码登录到 MySQL 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>提示输入密码时直接敲回车。</p><p>5.选择 mysql 数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><p>因为 mysql 数据库中存储了一张 MySQL 用户的 user 表</p><p>6.在 mysql 数据库的 user 表中查看当前 root 用户的相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host, user, authentication_string, plugin from user;</span><br></pre></td></tr></table></figure><p>执行完上面的命令后会显示一个表格</p><p>表格中有以下信息：</p><p>host: 允许用户登录的 ip ‘位置’ % 表示可以远程；</p><p>user: 当前数据库的用户名；</p><p>authentication_string: 用户密码（在mysql 5.7.9以后废弃了password字段和password()函数）；</p><p>plugin： 密码加密方式；</p><p>7.将默认的 root 密码置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;  </span><br><span class="line">update user set authentication_string=&apos;&apos; where user=&apos;root&apos;;</span><br></pre></td></tr></table></figure><p>8.退出 mysql命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><p>9.删除 /etc/my.cnf 文件最后的 skip-grant-tables</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>删除 skip-grant-tables 并保存退出。</p><p>10.重启 MySQL 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>11.重新登录到 MySQL 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>提示输入密码时直接敲回车，因为我们刚才已经将密码置为空了。</p><p>12.使用 ALTER 修改 root 用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER user &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Xpf123@&apos;;</span><br></pre></td></tr></table></figure><p>其中 Xpf123@ 为你设置的新密码，注意这个密码如果设置的比较简单，例如 123456 等等，会设置不成功，它会提示你设置的密码太简单，最好设置成大写字母、数字、符号的组合。</p><p>执行完之后会提示你 OK 的话，就代表修改成功了，至此重置密码也就算是完了，你可以使用新设置的密码去登录试试。</p><p>可能很多同学在修改的密码中遇到了很多问题，例如装的是 MySQL 8.0，然后去重置密码，还是用的旧的命令去修改密码，导致报错，因为 MySQL 5.7.6 以后废弃了 user 表中的 password 字段和 password() 方法，所以使用旧的方法去重置密码对 mysql 8.0 是不行的！</p><p>好了，今天的讲解就到这里吧。</p><p>如果大家有什么问题，请在下方留言！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章我们已经讲完了 MySQL 的安装，本篇接下来将一下如何重置密码。&lt;/p&gt;
&lt;p&gt;1.查看自动生成的密码&lt;/p&gt;
&lt;p&gt;安装完成后 MySQL会给我们自动生成一个随机密码&lt;/p&gt;
&lt;p&gt;查看命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="CentOS" scheme="http://www.x-sir.com/tags/CentOS/"/>
    
      <category term="MySQL" scheme="http://www.x-sir.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 3.1.0 升级问题记录</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20Studio3.1.0%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.x-sir.com/2017/09/24/Android Studio3.1.0升级问题记录/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:14:19.626Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每次升级Android Studio时，一般情况下 Gradle 版本的也会相应的升级，我之前Android Studio 3.0.1、Gradle 是 4.1 升级后为：Android Studio 3.1.0、Gradle 为4.4。</p></blockquote><p>升级完成后先是报一堆错（每次都升级都是-。-）</p><p>##第一个错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The SourceSet &apos;instrumentTest&apos; is not recognized by the Android Gradle Plugin. Perhaps you misspelled something?</span><br></pre></td></tr></table></figure><p>翻译过来就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“SourceSet” 的&apos;instrumentTest&apos; 没有被Android Gradle插件识别。也许你拼错吗?</span><br></pre></td></tr></table></figure><p>猜想可能Gradle移除了’instrumentTest’关键字，网上搜了一下，博客地址如下：<a href="http://www.it1352.com/139247.html" target="_blank" rel="noopener">http://www.it1352.com/139247.html</a></p><p>新版本Gradle对其做了重命名</p><p>即：</p><pre><code>旧版本 - &gt; 新版本instrumentTestCompile - &gt; androidTestCompile instrumentTest  - &gt; androidTest </code></pre><p>然后查看了自己所有module的Gradle，发现有一个地方用到了 <strong>instrumentTest</strong> ，将其改为 <strong>androidTest</strong> ，然后继续同步Gradle，然后编译，这个错误不报了。</p><p>##第二个错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Configuration &apos;compile&apos; is obsolete and has been replaced with &apos;implementation&apos;.</span><br><span class="line">It will be removed at the end of 2018</span><br></pre></td></tr></table></figure><p>翻译过来就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置“编译”已经过时，取而代之的是“实现”。它将在2018年底被移除。</span><br></pre></td></tr></table></figure><p>我们知道，在Android Studio3.0开始的时候就将 <strong>compile</strong> 改为 <strong>implementation</strong> 关键字了，当时，项目中大部分的compile改为了implementation，但是还有一部分没有改过来，但是仍然可以使用，但是现在呢？尼玛直接给编译就报错！这不是强制性的让使用 <strong>implementation</strong> 么？报的错中提示2018年底才移除，这还没到年底呢，就不能用了？</p><p>还是乖乖的改吧，由于是我们的依赖的library中使用了compile，相当于是library依赖了一个第三方库，直接改为implementation就相当于屏蔽掉了app对library依赖的第三方库api的访问权限，而我们的app刚好用到了library依赖的第三方库的api，所以直接改为implementation是不行的，要想让app能访问到就将其改为 <strong>api</strong>就可以了，其实这不是一个好的解决办法，最好的解决办法是，library中封装一层app访问library依赖的第三方库api的方法，这样的话app是和library依赖的第三方库是没有任何关系的，这样就降低了app与library依赖的第三方库的耦合性，这样也体现了“第三方库隔离”的原则，如果以后依赖的库变了，你只需要修改library中依赖的库及app调用的方法即可，不用动app里面的代码了~</p><p>##第三个错误如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Duplicate zip entry [com/c/a/a/a/a.class == 69.jar:com/ta/utdid2/b/a/a.class]</span><br></pre></td></tr></table></figure><p>翻译过来如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重复的类，即类所在的包名和类名都相等</span><br></pre></td></tr></table></figure><p>一般情况下不会写包名和类名相同的类，我猜测一定是Jar包重了，仔细找了一下，发现两个library中都使用了<br>阿里的httpdns的jar包，只不过是Jar包的版本不一样，旧版本中其中一个library中使用了 <strong>provided</strong> 编译，所以没有报冲突，现在新版本推荐使用 <strong>compileOnly</strong> 关键字，替换为compileOnly关键字后还是报一样的错，哎呦！这就纳闷了，compileOnly的意思不就是编译时依赖，不打紧包中的意思吗？怎么还冲突？仔细查找了一下，发现其中一个library中多了一个混淆规则的jar包（utdid4all-1.1.5.3_proguard.jar），而另外一个没有，但是旧版本是没有问题的，我猜测可能是编译混淆后发现两个类是一样的所以就报错了…</p><p>###解决办法一:</p><p>两个library中都添加 <strong>utdid4all-1.1.5.3_proguard.jar</strong> 使用 <strong>compileOnly</strong> 关键字编译；</p><p>###解决办法二：</p><p>两个library中都不添加 <strong>utdid4all-1.1.5.3_proguard.jar</strong>；</p><p>###解决办法三：</p><p>在app中添加一个 <strong>utdid4all-1.1.5.3_proguard.jar</strong> 进行编译即可；</p><p>至此，以上几个错误都解决完了~</p><p>##总结</p><p>我们应该理解implementation、api、compileOnly等几个关键字的区别，具体见下图：</p><p><img src="https://img-blog.csdn.net/20180404101145997?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnBlbmdmZWk1MjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>最后附上几个参考链接：</p><p><a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph</a></p><p><a href="https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration" target="_blank" rel="noopener">https://stackoverflow.com/questions/44413952/gradle-implementation-vs-api-configuration</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每次升级Android Studio时，一般情况下 Gradle 版本的也会相应的升级，我之前Android Studio 3.0.1、Gradle 是 4.1 升级后为：Android Studio 3.1.0、Gradle 为4.4。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Android Studio" scheme="http://www.x-sir.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 打 JAR 包</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20Studio%E6%89%93JAR%E5%8C%85/"/>
    <id>http://www.x-sir.com/2017/09/24/Android Studio打JAR包/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:17:19.657Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 新增了依赖<strong>library</strong>的方式，有时候我们需要将一个 library 打成 jar 包供其他人使用下面就是具体打成的方法：</p><p>##1.在library的buildgradle中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">task makeJar(type: Copy) &#123;</span><br><span class="line">    delete &apos;build/libs/myjar.jar&apos;</span><br><span class="line">    from(&apos;build/intermediates/bundles/release/&apos;)</span><br><span class="line">    into(&apos;build/libs/&apos;)</span><br><span class="line">    include(&apos;classes.jar&apos;)</span><br><span class="line">    rename(&apos;classes.jar&apos;, &apos;myjar.jar&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，当你编译完整个工程后，所有library库都已经生成了对应的包含class的classes.jar包，复制出这个jar包，修改名字后也可以使用了，默认生成的路径为：build/intermediates/bundles/release下面就可以看到生成的<strong>classes.jar</strong>文件了。</p><p>##2.如果你不想使用如上编译时生成的Jar包，你可以再Android Studio自带的Terminal中输入如下命令生成jar包<br>在终端执行生成JAR包<br><figure class="highlight plain"><figcaption><span>build```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或者在buildgradle中再添加如下两行代码即可</span><br></pre></td></tr></table></figure></p><p>makeJar.dependsOn(build)<br>//build.finalizedBy makeJar<br><code>`</code></p><p>Android Studio新增了@arr的依赖方式，它的好处是可以将资源文件也可以打进去，所以，我更推荐大家使用这种依赖方式。</p><p>最后他特别感谢如下博主的文章：</p><p>参考：blog:<a href="http://blog.csdn.net/ta893115871/article/details/46955791" target="_blank" rel="noopener">http://blog.csdn.net/ta893115871/article/details/46955791</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android Studio 新增了依赖&lt;strong&gt;library&lt;/strong&gt;的方式，有时候我们需要将一个 library 打成 jar 包供其他人使用下面就是具体打成的方法：&lt;/p&gt;
&lt;p&gt;##1.在library的buildgradle中添加如下代码&lt;/p&gt;

      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://www.x-sir.com/tags/Android-Studio/"/>
    
      <category term="JAR" scheme="http://www.x-sir.com/tags/JAR/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 曲折更新之路</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20Studio%E6%9B%B2%E6%8A%98%E6%9B%B4%E6%96%B0%E4%B9%8B%E8%B7%AF/"/>
    <id>http://www.x-sir.com/2017/09/24/Android Studio曲折更新之路/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:17:29.656Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android studio 3.0 版本出来也好长时间了，自己的电脑每次有更新我就立马回更新成最新的，公司的电脑自从装上AS就没有更新过，主要是工作比较忙没有时间去更新，这不周末把电脑带回来想着更新成最新的版本…</p></blockquote><p>##1.开始更新</p><p>打开AS 点击Help –&gt; Check for Updates…</p><p>等了一小会后弹出的是<strong>Download</strong>而不是<strong>Update and Restart</strong>安装更新并重启的按钮，点击<strong>Download</strong>按钮之后，跳转到浏览器，让下载新版本，纳尼？这是什么鬼？我自己的电脑每次更新都是自己下载安装完补丁之后自动安装并重启的，下载完再安装也是可以的，就是比较麻烦而已，而我不想使用这种方式去安装，最后搜了一下大概的意思就是Android Studio的版本太低了不支持使用更新补丁的方式升级到最新的版本，我现在的版本是2.2.3想升级到最新的3.0.1版本，而Google不提供补丁包，可能是版本跨度太大了吧，我想着肯定是有办法的，最后在CSDN上找到一篇博客，和我的情况一样，使用手动更新Android Studio到最新版本，按照他的办法步骤如下：</p><p>###1.1找到最新的版本号对应的串号</p><p><a href="https://dl.google.com/Android/studio/patches/updates.xml" target="_blank" rel="noopener">https://dl.google.com/Android/studio/patches/updates.xml</a></p><p>如下图所示：</p><p>###1.2下载你对应版本的到最新版本的补丁包</p><p>点开AS的Setting-&gt;在点开Update就可以看到当前版本的串号，如下图：</p><p>然后拼接出一个下载补丁包的url:如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样就可以下载对应的版本的补丁包，我第一次拼接时，没有自动下载，然后响应超时了，估计是版本太旧的缘故，刚才在https://dl.google.com/Android/studio/patches/updates.xml网页中看到了许多版本更新到最新版本的更新包，仔细看了看，确实没有我这个版本的更新补丁包，找到最低的版本的补丁包是2.3.3，也就是2.3.3肯定是可以更新到3.0.1的，所有有个折中的办法是先更新到2.3.3，再更新到3.0.1，于是从上面的网页中找到2.3.3对应的版本串口，拼接出一个下载的url,复制到浏览器中，点击回车... WC！！！FUCK!居然可以下载了，太爽了，马上就下载完成了。</span><br><span class="line"></span><br><span class="line">###1.3手动安装AS补丁包</span><br><span class="line"></span><br><span class="line">打开CMD，切换到AS安装的更目录，输入一下命令后回车：</span><br><span class="line"></span><br><span class="line">```java -classpath E:\AI-145.3537739-162.4069837-patch-win.jar com.intellij.updater.Runner install .</span><br></pre></td></tr></table></figure><p>命令格式格式：java -classpath + 更新包的路径 + com.intellij.updater.Runner install .</p><p>稍等一会更新包就安装完成了</p><p>然后打开AS，会提示AS已经更新，提示你是否导入之前版本的设置，说明AS已经更新，进去之后再查看版本已经更新到2.3.3了，至此更新的第一步已经完成，接下来就简单了，点击Check for Updates…弹出窗口中终于出现了<strong>Update and Restart</strong>按钮，点击该按钮即可自动下载并更新…</p><p>最后附上2.2.3-2.3.3的更新包，需要的可自行下载。</p><p><a href="http://download.csdn.net/download/xinpengfei521/10133487" target="_blank" rel="noopener">http://download.csdn.net/download/xinpengfei521/10133487</a></p><p>另外，感谢下面博主的博客：</p><p><a href="http://blog.csdn.net/u010798604/article/details/52838030" target="_blank" rel="noopener">http://blog.csdn.net/u010798604/article/details/52838030</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Android studio 3.0 版本出来也好长时间了，自己的电脑每次有更新我就立马回更新成最新的，公司的电脑自从装上AS就没有更新过，主要是工作比较忙没有时间去更新，这不周末把电脑带回来想着更新成最新的版本…&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Android Studio" scheme="http://www.x-sir.com/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 添加 arr 依赖</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20Studio%E6%B7%BB%E5%8A%A0arr%E4%BE%9D%E8%B5%96/"/>
    <id>http://www.x-sir.com/2017/09/24/Android Studio添加arr依赖/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:17:36.465Z</updated>
    
    <content type="html"><![CDATA[<p>##1.将arr库放到libs下面</p><p>##2.在app的buildgradle的android节点中添加如下代码</p><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    flatDir &#123;</span><br><span class="line">        dirs &apos;libs&apos; //this way we can find the .aar file in libs folder</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##3.在dependencies中添加如下依赖</p><p><code>compile(name: &#39;com.datescroller.lib-release&#39;, ext: &#39;aar&#39;)</code></p><p>name后面就是arr的库名，不带后缀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.将arr库放到libs下面&lt;/p&gt;
&lt;p&gt;##2.在app的buildgradle的android节点中添加如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;/figca
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://www.x-sir.com/tags/Android-Studio/"/>
    
      <category term="arr" scheme="http://www.x-sir.com/tags/arr/"/>
    
  </entry>
  
  <entry>
    <title>Android TextView 实现跑马灯</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20TextView%E5%AE%9E%E7%8E%B0%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    <id>http://www.x-sir.com/2017/09/24/Android TextView实现跑马灯/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:17:46.327Z</updated>
    
    <content type="html"><![CDATA[<p>##一、使用TextView属性来实现</p><p>1.布局文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">       android:id=&quot;@+id/tvNotice&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;match_parent&quot;</span><br><span class="line">       android:drawableLeft=&quot;@drawable/ico_tongzhi&quot;</span><br><span class="line">       android:drawablePadding=&quot;12dp&quot;</span><br><span class="line">       android:ellipsize=&quot;marquee&quot;</span><br><span class="line">       android:gravity=&quot;center_vertical&quot;</span><br><span class="line">       android:marqueeRepeatLimit=&quot;marquee_forever&quot;</span><br><span class="line">       android:singleLine=&quot;true&quot;</span><br><span class="line">       android:text=&quot;@string/notice_content&quot;</span><br><span class="line">       android:textColor=&quot;@color/white&quot;</span><br><span class="line">       android:textSize=&quot;24sp&quot;</span><br><span class="line">       android:visibility=&quot;visible&quot; /&gt;</span><br></pre></td></tr></table></figure><p>2.代码中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tvContent.setText(&quot;xxxx...&quot;);</span><br><span class="line">tvContent.setFocusable(true); // 获取焦点</span><br><span class="line">tvContent.setFocusableInTouchMode(true);</span><br><span class="line">tvContent.requestFocus();</span><br></pre></td></tr></table></figure><p>##二、使用自定义View实现</p><p>1.继承TextView并重写isFocused方法，返回true，让其获取焦点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by xpf on 2016/11/19 :)</span><br><span class="line"> * Function:自定义Marquee textView</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class MyTextView extends TextView &#123;</span><br><span class="line"></span><br><span class="line">    public MyTextView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyTextView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyTextView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isFocused() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.布局文件中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.anloq.ui.MyTextView</span><br><span class="line">       android:id=&quot;@+id/tvNotice&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;match_parent&quot;</span><br><span class="line">       android:drawableLeft=&quot;@drawable/ico_tongzhi&quot;</span><br><span class="line">       android:drawablePadding=&quot;12dp&quot;</span><br><span class="line">       android:ellipsize=&quot;marquee&quot;</span><br><span class="line">       android:gravity=&quot;center_vertical&quot;</span><br><span class="line">android:scrollHorizontally=“true”</span><br><span class="line">       android:marqueeRepeatLimit=&quot;marquee_forever&quot;</span><br><span class="line">       android:singleLine=&quot;true&quot;</span><br><span class="line">       android:text=&quot;@string/notice_content&quot;</span><br><span class="line">       android:textColor=&quot;@color/white&quot;</span><br><span class="line">       android:textSize=&quot;24sp&quot;</span><br><span class="line">       android:visibility=&quot;visible&quot; /&gt;</span><br></pre></td></tr></table></figure><p>3.属性介绍</p><p><strong>marqueeRepeatLimit</strong> 表示跑马灯循环的次数，marquee_forever表示一直循环，也可以写个数字表示次数<br>然后Activity中可以使设置其settext就ok了；<br><strong>scrollHorizontally</strong> 表示滚动的方向是否为水平方向；</p><p>##三、总结</p><p>关于这两种实现的的方式评价：</p><p>第一种方式采用原生控件来实现，但是存在要在Activity中要获取焦点，我们知道Activity中当前只有一个View控件能获取焦点，这样存在的问题是如果我们的页面中有一个默认要获取焦点的EditText控件时，这样就有问题了，但是方法二就不存在这样的问题，因此，个人偏向于第二种实现的方式，更加灵活，后续也可增加速度等实现个性化的定制。</p><p>最后感谢参考文章：</p><p><a href="http://www.cnblogs.com/over140/p/3687952.html" target="_blank" rel="noopener">http://www.cnblogs.com/over140/p/3687952.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##一、使用TextView属性来实现&lt;/p&gt;
&lt;p&gt;1.布局文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="TextView" scheme="http://www.x-sir.com/tags/TextView/"/>
    
      <category term="跑马灯" scheme="http://www.x-sir.com/tags/%E8%B7%91%E9%A9%AC%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android adb 命令</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20adb%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://www.x-sir.com/2017/09/24/Android adb命令大全/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:10:16.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-查看当前adb版本"><a href="#1-查看当前adb版本" class="headerlink" title="1.查看当前adb版本"></a>1.查看当前adb版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$adb version</span><br><span class="line">Android Debug Bridge version 1.0.36</span><br><span class="line">Revision 0e9850346394-android</span><br></pre></td></tr></table></figure><h2 id="2-查看当前已连接的设备"><a href="#2-查看当前已连接的设备" class="headerlink" title="2.查看当前已连接的设备"></a>2.查看当前已连接的设备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$adb devices</span><br><span class="line">f414ec93        device</span><br><span class="line">20080411        device</span><br></pre></td></tr></table></figure><p>##3.安装apk文件</p><p>直接安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$adb install + apk文件的路径</span><br></pre></td></tr></table></figure></p><p>一般在安装的时候先敲出<strong>adb install</strong>然后直接将apk文件拖到MS Dos窗口中即可,然后点击回车即可自动安装。</p><p>提示：有时候有的安装时会失败，因为有可能包含中文路径，建议最好不要包含中文路径！</p><p>保留数据和缓存文件，重新安装apk：<br><figure class="highlight plain"><figcaption><span>install -r hello.apk```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装apk到sd卡：</span><br><span class="line">```adb install -s hello.apk</span><br></pre></td></tr></table></figure></p><h2 id="4-拉取文件到电脑"><a href="#4-拉取文件到电脑" class="headerlink" title="4.拉取文件到电脑"></a>4.拉取文件到电脑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$adb pull +手机文件路径/目录 + 空格 + 电脑目录 </span><br><span class="line">adb pull /data/data/com.xpf.demo/files/20171031.txt c:/Users/xin/</span><br><span class="line">[100%] /data/data/com.xpf.demo/files/20171031.txt</span><br></pre></td></tr></table></figure><h2 id="5-从电脑复制文件到手机"><a href="#5-从电脑复制文件到手机" class="headerlink" title="5.从电脑复制文件到手机"></a>5.从电脑复制文件到手机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$adb push + 电脑文件路径 + 空格 + 手机文件路径/目录</span><br><span class="line">$adb push hello.txt /sdcard/mydir/</span><br></pre></td></tr></table></figure><h2 id="6-卸载已安装的app"><a href="#6-卸载已安装的app" class="headerlink" title="6.卸载已安装的app"></a>6.卸载已安装的app</h2><p>直接卸载：<figure class="highlight plain"><figcaption><span>uninstall <package>```</package></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">卸载App但保留数据和缓存文件：</span><br><span class="line">```adb uninstall -k com.xpf.demo</span><br></pre></td></tr></table></figure></p><h2 id="7-adb-Server"><a href="#7-adb-Server" class="headerlink" title="7.adb Server"></a>7.adb Server</h2><p>我们在调试的时候，偶尔也会遇到手机adb连接不上的情况，我们先kill掉server在start server就好了<br>启动adb server ：<br><figure class="highlight plain"><figcaption><span>start-server```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">停止adb server ：</span><br><span class="line">```adb kill-server</span><br></pre></td></tr></table></figure></p><h2 id="8-查看手机屏幕分辨率"><a href="#8-查看手机屏幕分辨率" class="headerlink" title="8.查看手机屏幕分辨率"></a>8.查看手机屏幕分辨率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell wm size</span><br><span class="line">Physical size: 1080x1920</span><br></pre></td></tr></table></figure><h2 id="9-查看adb命令帮助信息"><a href="#9-查看adb命令帮助信息" class="headerlink" title="9.查看adb命令帮助信息"></a>9.查看adb命令帮助信息</h2><figure class="highlight plain"><figcaption><span>help```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10.在命令行中查看LOG日志</span><br><span class="line"></span><br><span class="line">```adb logcat -s 标签名</span><br></pre></td></tr></table></figure><p>温馨提示：加入标签名可以进行log打印过滤，不然打印出来的日志太多不方便查看</p><h2 id="11-发布端口"><a href="#11-发布端口" class="headerlink" title="11.发布端口"></a>11.发布端口</h2><p>可以设置任意的端口号作为主机向模拟器或设备的请求端口。</p><figure class="highlight plain"><figcaption><span>forward tcp:5555 tcp:8000```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 12.查看bug报告</span><br><span class="line"></span><br><span class="line">```adb bugreport</span><br></pre></td></tr></table></figure><h2 id="13-屏幕录像"><a href="#13-屏幕录像" class="headerlink" title="13.屏幕录像"></a>13.屏幕录像</h2><p>例如，开始录制屏幕并储存到/sdcard根目录，同时名字为video.mp4</p><figure class="highlight plain"><figcaption><span>shell screenrecord</span><a href="/sdcard/video.mp4```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 14.关闭设备请求，开启设备</span><br></pre></td></tr></table></figure><p>adb shell stop<br>adb shell start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 15.设备关机以及重启</span><br></pre></td></tr></table></figure></p><p>adb reboot<br>adb shutdown<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 16.获取已连接的手机序列号</span><br><span class="line"></span><br><span class="line">```adb get-serialno</span><br></pre></td></tr></table></figure></p><h2 id="17-获取设备的连接状态"><a href="#17-获取设备的连接状态" class="headerlink" title="17.获取设备的连接状态"></a>17.获取设备的连接状态</h2><figure class="highlight plain"><figcaption><span>-s f414ec93 get-state```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中**f414ec93**为手机序列号（获取序列号参考16）</span><br><span class="line"></span><br><span class="line">## 18.查看目录下的所有文件及文件夹</span><br><span class="line"></span><br><span class="line">```adb shell ls</span><br></pre></td></tr></table></figure><p>##19.查看文件夹内容</p><figure class="highlight plain"><figcaption><span>shell cd <folder> ```</folder></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 20.新建文件夹（目录）</span><br><span class="line"></span><br><span class="line">```adb shell mkdir path/floldername</span><br></pre></td></tr></table></figure><p>##21.发送文件内容</p><figure class="highlight plain"><figcaption><span>shell input text <context>```</context></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 22.通过adb命令发送键盘按键事件</span><br><span class="line"></span><br><span class="line">```adb shell input keyevent &lt;keycode&gt;</span><br></pre></td></tr></table></figure><h2 id="23-获取设备参数信息"><a href="#23-获取设备参数信息" class="headerlink" title="23.获取设备参数信息"></a>23.获取设备参数信息</h2><figure class="highlight plain"><figcaption><span>shell getprop <key>```</key></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 24.设置设备的参数信息</span><br><span class="line"></span><br><span class="line">```adb shell setprop &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure><h2 id="25-使用adb命令进行截屏操作"><a href="#25-使用adb命令进行截屏操作" class="headerlink" title="25.使用adb命令进行截屏操作"></a>25.使用adb命令进行截屏操作</h2><figure class="highlight plain"><figcaption><span>shell screencap -p <path file="">```</path></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 26.查看内存情况，如果有number表示查看多少条数据</span><br><span class="line"></span><br><span class="line">```adb shell top [-m &lt;number&gt;]</span><br></pre></td></tr></table></figure><h2 id="27-查看进程列表数据"><a href="#27-查看进程列表数据" class="headerlink" title="27.查看进程列表数据"></a>27.查看进程列表数据</h2><figure class="highlight plain"><figcaption><span>shell ps```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 28.杀死对应pid的进程</span><br><span class="line"></span><br><span class="line">```adb shell kill &lt;pid&gt;</span><br></pre></td></tr></table></figure><h2 id="29-查看指定pid进行的运行状态"><a href="#29-查看指定pid进行的运行状态" class="headerlink" title="29.查看指定pid进行的运行状态"></a>29.查看指定pid进行的运行状态</h2><figure class="highlight plain"><figcaption><span>shell ps -x <pid>```</pid></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 30.查看后台服务信息</span><br><span class="line"></span><br><span class="line">```adb shell service list</span><br></pre></td></tr></table></figure><h2 id="31-查看当前内存占用情况"><a href="#31-查看当前内存占用情况" class="headerlink" title="31.查看当前内存占用情况"></a>31.查看当前内存占用情况</h2><figure class="highlight plain"><figcaption><span>shell cat</span><a href="/proc/meminfo```">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 32.查看io内存分区情况</span><br><span class="line"></span><br><span class="line">```adb shell cat /proc/iomen</span><br></pre></td></tr></table></figure><h2 id="33-将system分区重新挂载为可读写分区"><a href="#33-将system分区重新挂载为可读写分区" class="headerlink" title="33.将system分区重新挂载为可读写分区"></a>33.将system分区重新挂载为可读写分区</h2><figure class="highlight plain"><figcaption><span>remount```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 34.列出除了系统应用的第三方应用包名</span><br><span class="line"></span><br><span class="line">```adb shell pm list packages -3</span><br></pre></td></tr></table></figure><h2 id="35-清除应用数据与缓存"><a href="#35-清除应用数据与缓存" class="headerlink" title="35.清除应用数据与缓存"></a>35.清除应用数据与缓存</h2><p><code>adb shell pm clear &lt;packagename&gt;</code></p><p>好了，就写到这里吧，其实ADB命令有很多，我只整理了一些大家比较常用的一些命令，当然我们有时候要记忆的东西太多了，记不住有些命令，你需要做的就是点击收藏按钮，当用的时候就可以方便自己查找了，如果你觉得文本不错，请您点个赞，码字不易，且行且珍惜！</p><p>再小的点赞也是对博主的莫大鼓励！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-查看当前adb版本&quot;&gt;&lt;a href=&quot;#1-查看当前adb版本&quot; class=&quot;headerlink&quot; title=&quot;1.查看当前adb版本&quot;&gt;&lt;/a&gt;1.查看当前adb版本&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="adb" scheme="http://www.x-sir.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用 Glide 实现圆形和圆角图片</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20%E4%BD%BF%E7%94%A8Glide%E5%AE%9E%E7%8E%B0%E5%9C%86%E5%BD%A2%E5%92%8C%E5%9C%86%E8%A7%92%E5%9B%BE%E7%89%87/"/>
    <id>http://www.x-sir.com/2017/09/24/Android 使用Glide实现圆形和圆角图片/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:08:37.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实现圆形图片"><a href="#1-实现圆形图片" class="headerlink" title="1.实现圆形图片"></a>1.实现圆形图片</h2><h3 id="1-1自定义圆形处理工具类"><a href="#1-1自定义圆形处理工具类" class="headerlink" title="1.1自定义圆形处理工具类"></a>1.1自定义圆形处理工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapShader;</span><br><span class="line">import android.graphics.Canvas;</span><br><span class="line">import android.graphics.Paint;</span><br><span class="line"></span><br><span class="line">import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;</span><br><span class="line">import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/6/17 :)</span><br><span class="line"> * Function:Glide Transformation 实现圆形图片</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class GlideCircleTransform extends BitmapTransformation &#123;</span><br><span class="line"></span><br><span class="line">    public GlideCircleTransform(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</span><br><span class="line">        return circleCrop(pool, toTransform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Bitmap circleCrop(BitmapPool pool, Bitmap source) &#123;</span><br><span class="line">        if (source == null) return null;</span><br><span class="line"></span><br><span class="line">        int size = Math.min(source.getWidth(), source.getHeight());</span><br><span class="line">        int x = (source.getWidth() - size) / 2;</span><br><span class="line">        int y = (source.getHeight() - size) / 2;</span><br><span class="line"></span><br><span class="line">        // TODO this could be acquired from the pool too</span><br><span class="line">        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);</span><br><span class="line"></span><br><span class="line">        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Canvas canvas = new Canvas(result);</span><br><span class="line">        Paint paint = new Paint();</span><br><span class="line">        paint.setShader(new BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class="line">        paint.setAntiAlias(true);</span><br><span class="line">        float r = size / 2f;</span><br><span class="line">        canvas.drawCircle(r, r, r, paint);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2用法"><a href="#1-2用法" class="headerlink" title="1.2用法"></a>1.2用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(mContext)</span><br><span class="line">                         .load(headpic)</span><br><span class="line">                         .diskCacheStrategy(DiskCacheStrategy.NONE)</span><br><span class="line">                         .transform(new GlideCircleTransform(mContext))</span><br><span class="line">                         .crossFade()</span><br><span class="line">                         .into(ivIcon);</span><br></pre></td></tr></table></figure><h2 id="2-实现加载圆角图片"><a href="#2-实现加载圆角图片" class="headerlink" title="2.实现加载圆角图片"></a>2.实现加载圆角图片</h2><h3 id="2-1自定义圆角处理工具类"><a href="#2-1自定义圆角处理工具类" class="headerlink" title="2.1自定义圆角处理工具类"></a>2.1自定义圆角处理工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.content.res.Resources;</span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapShader;</span><br><span class="line">import android.graphics.Canvas;</span><br><span class="line">import android.graphics.Paint;</span><br><span class="line">import android.graphics.RectF;</span><br><span class="line"></span><br><span class="line">import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;</span><br><span class="line">import com.bumptech.glide.load.resource.bitmap.BitmapTransformation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/6/17 :)</span><br><span class="line"> * Function:Glide Transformation 实现圆角图片</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class GlideRoundTransform extends BitmapTransformation &#123;</span><br><span class="line"></span><br><span class="line">    private static float radius = 0f;</span><br><span class="line"></span><br><span class="line">    public GlideRoundTransform(Context context) &#123;</span><br><span class="line">        this(context, 4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public GlideRoundTransform(Context context, int dp) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        this.radius = Resources.getSystem().getDisplayMetrics().density * dp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</span><br><span class="line">        return roundCrop(pool, toTransform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Bitmap roundCrop(BitmapPool pool, Bitmap source) &#123;</span><br><span class="line">        if (source == null) return null;</span><br><span class="line"></span><br><span class="line">        Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        if (result == null) &#123;</span><br><span class="line">            result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Canvas canvas = new Canvas(result);</span><br><span class="line">        Paint paint = new Paint();</span><br><span class="line">        paint.setShader(new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class="line">        paint.setAntiAlias(true);</span><br><span class="line">        RectF rectF = new RectF(0f, 0f, source.getWidth(), source.getHeight());</span><br><span class="line">        canvas.drawRoundRect(rectF, radius, radius, paint);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override public String getId() &#123;</span><br><span class="line">        return getClass().getName() + Math.round(radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1用法示例"><a href="#2-1用法示例" class="headerlink" title="2.1用法示例"></a>2.1用法示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(mContext)</span><br><span class="line">                     .load(image_url)</span><br><span class="line">                     .transform(new GlideRoundTransform(mContext))</span><br><span class="line">                     .crossFade()</span><br><span class="line">                     .into(ivCard);</span><br></pre></td></tr></table></figure><p>当然圆角的radius可以自己定义，使用重载带radius的构造传入即可</p><p>好了，今天就到这里吧~</p><p>夜深了，晚安咯(￣o￣) . z Z</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-实现圆形图片&quot;&gt;&lt;a href=&quot;#1-实现圆形图片&quot; class=&quot;headerlink&quot; title=&quot;1.实现圆形图片&quot;&gt;&lt;/a&gt;1.实现圆形图片&lt;/h2&gt;&lt;h3 id=&quot;1-1自定义圆形处理工具类&quot;&gt;&lt;a href=&quot;#1-1自定义圆形处理工具类&quot; c
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Glide" scheme="http://www.x-sir.com/tags/Glide/"/>
    
  </entry>
  
  <entry>
    <title>Android 最全 Intent 传递数据姿势</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%20%E6%9C%80%E5%85%A8%20Intent%20%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://www.x-sir.com/2017/09/24/Android 最全 Intent 传递数据姿势/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:08:47.949Z</updated>
    
    <content type="html"><![CDATA[<center>点击上面蓝色字体关注<span style="color:#0000ff;">“IT大飞说”</span></center><center>置顶公众号（<strong>ID：ITBigFly</strong>）第一时间收到推送</center><p><img src="http://pcobk8jbf.bkt.clouddn.com/FqPzMTldx0N8CIpaF54OfAOggiv8" alt=""></p><blockquote><p>作为一个 <strong>Android</strong> 开发人员，我们都是用过 <strong>Intent</strong>，用它来在组件之间传递数据，所以说 <strong>Intent</strong> 是组件之间通信的使者，一般情况下，我们传递的都是一些比较简单的数据，并且都是基本的数据类型，写法也比较简单，今天我在这里说的是如何使用 <strong>Intent</strong> 传递对象及集合，我们知道<strong>Intent</strong> 是不能直接传递没有序列化的对象的，说到序列化，我们都知道，序列化有两种方式，即实现 <strong>Sereriable</strong> 或者 <strong>Paracelable</strong> 接口。默认情况下，像 <strong>List、Bitmap</strong> 等默认帮我们已经实现了序列化，我们就可以直接进行传递，还有一些像 <strong>Map</strong> 集合，自定义的 <strong>class</strong>，默认是没有实现序列化的接口的，我们必须要先实现序列化才可以进行传递。</p></blockquote><h2 id="1-传递序列化对象"><a href="#1-传递序列化对象" class="headerlink" title="1.传递序列化对象"></a><span style="color:#00ff00;">1.传递序列化对象</span></h2><h3 id="1-1-方式一"><a href="#1-1-方式一" class="headerlink" title="1.1 方式一"></a><span style="color:#0000ff;">1.1 方式一</span></h3><p>这种方式比较简单，我们可以先将对象使用 <strong>Gson</strong> 先序列化成 <strong>Json</strong> 字符串，然后作为字符串来使用 <strong>Intent</strong>，这种方式的好处是不需要实现 <strong>Sereriable</strong> 或者 <strong>Paracelable</strong>，坏处就是需要额外的使用 <strong>Gson</strong> 来序列化和解析。</p><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">user.setName(&quot;Jack&quot;);</span><br><span class="line">user.setAge(18);</span><br><span class="line">Intent intent=new Intent(ActivityA.this,ActivityB.class);</span><br><span class="line">intent.putExtra(&quot;user&quot;,new Gson().toJson(user));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String json = getIntent().getStringExtra(&quot;user&quot;);</span><br><span class="line">User user = new Gson().fromJson(json,User.class);</span><br></pre></td></tr></table></figure><h3 id="1-2-方式二"><a href="#1-2-方式二" class="headerlink" title="1.2 方式二"></a><span style="color:#0000ff;">1.2 方式二</span></h3><p>这种方式就是将数据封装到 <strong>Bundle</strong> 中然后把 <strong>Bundle</strong> 对象调用 <strong>Intent</strong> 的 <strong>putExtra</strong> 方法然后传递过去，<strong>Bundle</strong> 类默认也是已经实现了 <strong>Parcelable</strong> 接口的，所以可以传递 <strong>Bundle</strong> 对象。</p><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个Bundle对象封装数据</span><br><span class="line">   Bundle data = new Bundle();</span><br><span class="line">   data.putInt(&quot;age&quot;,18);</span><br><span class="line">   data.putString(&quot;name&quot;,&quot;Jack&quot;);</span><br><span class="line">intent.putExtra(&quot;data&quot;,data);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bundle data = getIntent().getBundleExtra(&quot;data&quot;);</span><br><span class="line">int id = data.getInt(&quot;age&quot;);</span><br><span class="line">String name = data.getString(&quot;name&quot;);</span><br></pre></td></tr></table></figure><h3 id="1-3-方式三"><a href="#1-3-方式三" class="headerlink" title="1.3 方式三"></a><span style="color:#0000ff;">1.3 方式三</span></h3><p>传递实现了 <strong>Serializable</strong> 接口的对象，这种方式也比较简单，传递之前先实现 <strong>Serializable</strong> 接口，也不需要重写方法。</p><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">user.setName(&quot;Jack&quot;);</span><br><span class="line">user.setAge(18);</span><br><span class="line">Intent intent=new Intent(ActivityA.this,ActivityB.class);</span><br><span class="line">Bundle bundle = new Bundle();</span><br><span class="line">bundle.putSerializable(&quot;user&quot;, user);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent(); </span><br><span class="line">User user = (User)intent.getSerializableExtra(&quot;user&quot;);</span><br></pre></td></tr></table></figure><h3 id="1-4-方式四"><a href="#1-4-方式四" class="headerlink" title="1.4 方式四"></a><span style="color:#0000ff;">1.4 方式四</span></h3><p>传递实现了 <strong>Parcelable</strong> 接口的对象，这种方式比实现 <strong>Serializable</strong> 接口的方式稍微麻烦一点，需要重写方法，不过我们程序员都是比较懒的，给大家推荐一个插件： <strong>android-parcelable-intellij-plugin</strong> ，安装完之后就可以使用快捷键自动生成实现了 <strong>Serializable</strong> 接口的对象了，是不是比较方便。</p><p>实现 <strong>Serializable</strong> 对象的 <strong>User</strong> 类示例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class User implements Parcelable &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int describeContents() &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void writeToParcel(Parcel dest, int flags) &#123;</span><br><span class="line">        dest.writeString(this.name);</span><br><span class="line">        dest.writeInt(this.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected User(Parcel in) &#123;</span><br><span class="line">        this.name = in.readString();</span><br><span class="line">        this.age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static final Parcelable.Creator&lt;User&gt; CREATOR = new Parcelable.Creator&lt;User&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public User createFromParcel(Parcel source) &#123;</span><br><span class="line">            return new User(source);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public User[] newArray(int size) &#123;</span><br><span class="line">            return new User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递数据的方法和 <strong>Serializable</strong> 类似，还是写一下把：</p><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();</span><br><span class="line">user.setName(&quot;Jack&quot;);</span><br><span class="line">user.setAge(18);</span><br><span class="line">Intent intent=new Intent(ActivityA.this,ActivityB.class);</span><br><span class="line">Bundle bundle = new Bundle();</span><br><span class="line">bundle.putParcelable(&quot;user&quot;, user);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent(); </span><br><span class="line">User user = (User)intent.getParcelableExtra(&quot;user&quot;);</span><br></pre></td></tr></table></figure><h2 id="2-传递集合类"><a href="#2-传递集合类" class="headerlink" title="2.传递集合类"></a><span style="color:#00ff00;">2.传递集合类</span></h2><h3 id="2-1-传递-List-集合数据"><a href="#2-1-传递-List-集合数据" class="headerlink" title="2.1 传递 List 集合数据"></a><span style="color:#0000ff;">2.1 传递 List 集合数据</span></h3><p>如果我们要传递的 <strong>List</strong> 集合，我们可以把 <strong>List</strong> 强转成 <strong>Serializable</strong> 类型，<strong>List</strong> 默认是实现了 <strong>Serializable</strong> 接口的，但是注意 <strong>List</strong> 的泛型类也必须要实现了 <strong>Serializable</strong> 接口，基本类型及包装类就不用了。</p><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User user1 = new User();</span><br><span class="line">user1.setName(&quot;Jack&quot;);</span><br><span class="line">user1.setAge(18);</span><br><span class="line">User user2 = new User();</span><br><span class="line">user2.setName(&quot;Marry&quot;);</span><br><span class="line">user2.setAge(20);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">   list.add(user1);</span><br><span class="line">   list.add(user2);</span><br><span class="line"></span><br><span class="line">Intent intent = new Intent(ActivityA.this,ActivityB.class);</span><br><span class="line">intent.putExtras(&quot;list&quot;,(Serializable)list);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent(); </span><br><span class="line">List&lt;User&gt; list = (List&lt;User&gt;) getIntent().getSerializableExtra(&quot;list&quot;);</span><br></pre></td></tr></table></figure><h3 id="2-2-传递-Map-集合数据"><a href="#2-2-传递-Map-集合数据" class="headerlink" title="2.2 传递 Map 集合数据"></a><span style="color:#0000ff;">2.2 传递 Map 集合数据</span></h3><p>Map接口及他的实现类默认是没有实现序列化的接口的，我们要想传递 <strong>Map</strong> 就要让 <strong>Map</strong> 实现序列化接口，我们可以自定义一个类，以HashMap为例吧，我们的类就叫 <strong>SerializableHashMap</strong> 吧，然后让定义一个 <strong>Map</strong> 变量作为成员属性并实现序列化接口，这样我们的类就可以进行传递了，<strong>SerializableHashMap</strong> 的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class SerializableHashMap implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    private HashMap&lt;String, String&gt; map;</span><br><span class="line"></span><br><span class="line">    public SerializableHashMap() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SerializableHashMap(HashMap&lt;String, String&gt; map) &#123;</span><br><span class="line">        this.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public HashMap&lt;String, String&gt; getMap() &#123;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMap(HashMap&lt;String, String&gt; map) &#123;</span><br><span class="line">        this.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：</p><p><strong>ActivityA</strong> 中设置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">   map.put(&quot;name&quot;, &quot;Jack&quot;);</span><br><span class="line">   map.put(&quot;age&quot;, 18);</span><br><span class="line"></span><br><span class="line">SerializableHashMap sMap = new SerializableHashMap();</span><br><span class="line">   sMap.setMap(map); // 将map数据添加到封装的sMap中</span><br><span class="line">   Bundle bundle = new Bundle();</span><br><span class="line">   bundle.putSerializable(&quot;map&quot;, sMap);</span><br><span class="line">   Intent intent = new Intent(ActivityA.this,ActivityB.class);</span><br><span class="line">   intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p><strong>ActivityB</strong> 中获取数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent(); </span><br><span class="line">   Bundle bundle = intent.getExtras();</span><br><span class="line">   SerializableHashMap sMap = (SerializableHashMap) bundle.get(&quot;map&quot;);</span><br><span class="line">   HashMap&lt;String, Object&gt; map = sMap.getMap();</span><br></pre></td></tr></table></figure><h3 id="2-3-如何选择？"><a href="#2-3-如何选择？" class="headerlink" title="2.3 如何选择？"></a><span style="color:#0000ff;">2.3 如何选择？</span></h3><p>另外，默认 <strong>Intent</strong> 帮我们实现了，可以支持传递 <strong>String</strong> 数组等，也比较简单，这里就不赘述了，另外如果数据量比较大的情况下，建议使用第三方框架来进行传递数据，例如：<strong>EventBus</strong> 等来代替，这样的话可以避免造成 <strong>TransactionTooLargeException</strong>。</p><p>如何选择哪种序列化方式？弄清楚他们的区别，你也就知道使用哪个更合适了。</p><p><strong>Serializable</strong> 和 <strong>Parcelable</strong> 接口的区别：</p><ul><li>在使用内存的时候，<strong>Parcelable</strong> 比 <strong>Serializable</strong> 性能高，所以推荐使用 <strong>Parcelable</strong>；</li><li><strong>Serializable</strong> 在序列化的时候会产生大量的临时变量，从而引起频繁的 <strong>GC</strong>；</li><li><strong>Parcelable</strong> 不能使用在要将数据存储在磁盘上的情况，因为 <strong>Parcelable</strong> 不能很好的保证数据的 持续性，在外界有变化的情况下，尽管 <strong>Serializable</strong> 效率低点，但此时还是建议使用<strong>Serializable</strong>；</li></ul><p>好了，今天的分享就到这里，我还是你们的大飞哥，喜欢我的文章的就点个赞，点赞的人最可爱！</p><p><img src="http://pcobk8jbf.bkt.clouddn.com/FjHrnzvoQFwJ0dOmvazQI0x9alHf" alt=""></p><p><strong>猜你喜欢：</strong><br><a href="https://mp.weixin.qq.com/s/ReJJFmQm6l55r9pvo7aFIA" target="_blank" rel="noopener">给大家推荐一个神器</a><br><a href="https://mp.weixin.qq.com/s/jxBEg7dpFfTNLXNFdvJjrw" target="_blank" rel="noopener">深入浅出Retrofit2.x(一)</a><br><a href="https://mp.weixin.qq.com/s/3GlXPLakrVhuq74gOk1wmQ" target="_blank" rel="noopener">MySQL8.0设置远程访问权限</a><br><a href="https://mp.weixin.qq.com/s/H8WqFy2RPYZWRpp63oBPfQ" target="_blank" rel="noopener">不得不会的10点Java基础知识</a><br><a href="https://mp.weixin.qq.com/s/EwD4Tp9zvaHFfZ17ayTksg" target="_blank" rel="noopener">CentOS7 重置 MySQL 8.0 密码</a>  </p><center>扫一扫，开启我们的的缘分</center><br><center><img src="http://pcobk8jbf.bkt.clouddn.com/FijAsROsRHuwVUivQ8M9D5o3RSdP" alt=""></center><br><center>可能不是最好的公众号，但肯定是最良心的公众号!</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;点击上面蓝色字体关注&lt;span style=&quot;color:#0000ff;&quot;&gt;“IT大飞说”&lt;/span&gt;&lt;/center&gt;&lt;center&gt;置顶公众号（&lt;strong&gt;ID：ITBigFly&lt;/strong&gt;）第一时间收到推送&lt;/center&gt;

&lt;p&gt;&lt;img 
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="Intent" scheme="http://www.x-sir.com/tags/Intent/"/>
    
  </entry>
  
  <entry>
    <title>Android 产生随机数</title>
    <link href="http://www.x-sir.com/2017/09/24/Android%E4%BA%A7%E7%94%9F%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://www.x-sir.com/2017/09/24/Android产生随机数/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T15:18:16.407Z</updated>
    
    <content type="html"><![CDATA[<p>##1.产生指定位数的随机数</p><p>以产生6位数随机数为例</p><figure class="highlight plain"><figcaption><span>num </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">产生其他位数随机数在最后面要乘的数即 *100000* 后加0即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##2.产生指定范围的随机数</span><br><span class="line"></span><br><span class="line">以产生[10,99]范围内的随机数为例</span><br></pre></td></tr></table></figure><p>int min=10;<br>int max=99;<br>Random random = new Random();<br>int num = random.nextInt(max)%(max-min+1) + min;<br><code>`</code></p><p>end ~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.产生指定位数的随机数&lt;/p&gt;
&lt;p&gt;以产生6位数随机数为例&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;num &lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Java" scheme="http://www.x-sir.com/categories/Java/"/>
    
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
      <category term="随机数" scheme="http://www.x-sir.com/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
</feed>
