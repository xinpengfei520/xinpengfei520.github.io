<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>「IT大飞说」的博客</title>
  
  <subtitle>魔都某非著名互联网创业公司码农，一个狂热的技术人！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.x-sir.com/"/>
  <updated>2018-12-05T11:29:17.687Z</updated>
  <id>http://www.x-sir.com/</id>
  
  <author>
    <name>x-sir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.x-sir.com/2018/12/05/hello-world/"/>
    <id>http://www.x-sir.com/2018/12/05/hello-world/</id>
    <published>2018-12-05T11:29:17.686Z</published>
    <updated>2018-12-05T11:29:17.687Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《Android源码设计模式》学习笔记之 ImageLoader</title>
    <link href="http://www.x-sir.com/2017/09/24/%E3%80%8AAndroid%E6%BA%90%E7%A0%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BImageLoader/"/>
    <id>http://www.x-sir.com/2017/09/24/《Android源码设计模式》学习笔记之ImageLoader/</id>
    <published>2017-09-24T15:47:57.000Z</published>
    <updated>2018-12-08T14:11:33.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求：设计一个图片加载工具类。<br>要求：职责单一、可扩展性强、实现三级缓存，遵循开闭原则。</p></blockquote><h2 id="1-改造前原始代码"><a href="#1-改造前原始代码" class="headerlink" title="1.改造前原始代码"></a>1.改造前原始代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line">import android.util.LruCache;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">    // 图片缓存</span><br><span class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</span><br><span class="line">    // 线程池，线程池数量为CPU的数量</span><br><span class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</span><br><span class="line">            Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    public ImageLoader() &#123;</span><br><span class="line">        initImageCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化图片缓存大小</span><br><span class="line">     */</span><br><span class="line">    private void initImageCache() &#123;</span><br><span class="line">        // 计算可使用的最大内存</span><br><span class="line">        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</span><br><span class="line">        // 取1/4的可用内存作为缓存</span><br><span class="line">        final int cacheSize = maxMemory / 4;</span><br><span class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected int sizeOf(String key, Bitmap value) &#123;</span><br><span class="line">                return value.getRowBytes() * value.getHeight() / 1024;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载显示图片</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param imageView</span><br><span class="line">     */</span><br><span class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</span><br><span class="line">        imageView.setTag(url);</span><br><span class="line">        mExecutorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Bitmap bitmap = downloadImage(url);</span><br><span class="line">                if (bitmap == null) return;</span><br><span class="line">                if (imageView.getTag().equals(url)) &#123;</span><br><span class="line">                    imageView.setImageBitmap(bitmap);</span><br><span class="line">                &#125;</span><br><span class="line">                mImageCache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载图片</span><br><span class="line">     *</span><br><span class="line">     * @param imageUrl</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Bitmap downloadImage(String imageUrl) &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(imageUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-遵循单一原则将原始类分为加载和缓存两个类（功能）"><a href="#2-遵循单一原则将原始类分为加载和缓存两个类（功能）" class="headerlink" title="2.遵循单一原则将原始类分为加载和缓存两个类（功能）"></a>2.遵循单一原则将原始类分为加载和缓存两个类（功能）</h2><h3 id="2-1-图片加载类为："><a href="#2-1-图片加载类为：" class="headerlink" title="2.1.图片加载类为："></a>2.1.图片加载类为：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">    // 图片缓存</span><br><span class="line">    ImageCache mImageCache = new ImageCache();</span><br><span class="line">    // 线程池，线程池数量为CPU的数量</span><br><span class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</span><br><span class="line">            Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载显示图片</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param imageView</span><br><span class="line">     */</span><br><span class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</span><br><span class="line">        // 优先从缓存中加载</span><br><span class="line">        Bitmap bitmap = mImageCache.get(url);</span><br><span class="line">        if (bitmap != null) &#123;</span><br><span class="line">            imageView.setImageBitmap(bitmap);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        imageView.setTag(url);</span><br><span class="line">        mExecutorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Bitmap bitmap = downloadImage(url);</span><br><span class="line">                if (bitmap == null) return;</span><br><span class="line">                if (imageView.getTag().equals(url)) &#123;</span><br><span class="line">                    imageView.setImageBitmap(bitmap);</span><br><span class="line">                &#125;</span><br><span class="line">                mImageCache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载图片</span><br><span class="line">     *</span><br><span class="line">     * @param imageUrl</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Bitmap downloadImage(String imageUrl) &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(imageUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-缓存类为"><a href="#2-2-缓存类为" class="headerlink" title="2.2.缓存类为"></a>2.2.缓存类为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.util.LruCache;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:图片缓存类</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageCache &#123;</span><br><span class="line">    // 图片LRU缓存</span><br><span class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</span><br><span class="line"></span><br><span class="line">    public ImageCache() &#123;</span><br><span class="line">        initImageCache();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化图片缓存大小</span><br><span class="line">     */</span><br><span class="line">    private void initImageCache() &#123;</span><br><span class="line">        // 计算可使用的最大内存</span><br><span class="line">        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</span><br><span class="line">        // 取1/4的可用内存作为缓存</span><br><span class="line">        final int cacheSize = maxMemory / 4;</span><br><span class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected int sizeOf(String key, Bitmap value) &#123;</span><br><span class="line">                return value.getRowBytes() * value.getHeight() / 1024;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void put(String url, Bitmap bitmap) &#123;</span><br><span class="line">        mImageCache.put(url, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Bitmap get(String url) &#123;</span><br><span class="line">        return mImageCache.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-提高扩展性，增加SD卡缓存"><a href="#3-提高扩展性，增加SD卡缓存" class="headerlink" title="3.提高扩展性，增加SD卡缓存"></a>3.提高扩展性，增加SD卡缓存</h2><p>以上将代码的功能分开了，逻辑更清晰了，职责也单一了，但是可扩展性还是比较差，接下来进行增加SD卡缓存。</p><h3 id="3-1增加SD卡缓存类"><a href="#3-1增加SD卡缓存类" class="headerlink" title="3.1增加SD卡缓存类"></a>3.1增加SD卡缓存类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class DiskCache &#123;</span><br><span class="line">    static String cacheDir = &quot;/sdcard/cache/image/&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从SD卡中读取</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Bitmap get(String url) &#123;</span><br><span class="line">        return BitmapFactory.decodeFile(cacheDir + url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存到SD卡中</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param bmp</span><br><span class="line">     */</span><br><span class="line">    public void put(String url, Bitmap bmp) &#123;</span><br><span class="line">        FileOutputStream fos = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fos = new FileOutputStream(cacheDir + url);</span><br><span class="line">            bmp.compress(Bitmap.CompressFormat.PNG, 100, fos);</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (fos != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2ImageLoader中增加一个boolean值来设置使用哪种缓存方式"><a href="#3-2ImageLoader中增加一个boolean值来设置使用哪种缓存方式" class="headerlink" title="3.2ImageLoader中增加一个boolean值来设置使用哪种缓存方式"></a>3.2ImageLoader中增加一个boolean值来设置使用哪种缓存方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">    // 内存缓存</span><br><span class="line">    ImageCache mImageCache = new ImageCache();</span><br><span class="line">    // SD卡缓存</span><br><span class="line">    DiskCache mDiskCache = new DiskCache();</span><br><span class="line">    // 是否使用SD卡缓存</span><br><span class="line">    boolean isUseDiskCache = false;</span><br><span class="line">    // 线程池，线程池数量为CPU的数量</span><br><span class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</span><br><span class="line">            Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载显示图片</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param imageView</span><br><span class="line">     */</span><br><span class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</span><br><span class="line">        // 优先从缓存中加载</span><br><span class="line">        Bitmap bitmap = isUseDiskCache ? mImageCache.get(url) : mDiskCache.get(url);</span><br><span class="line">        if (bitmap != null) &#123;</span><br><span class="line">            imageView.setImageBitmap(bitmap);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        imageView.setTag(url);</span><br><span class="line">        mExecutorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Bitmap bitmap = downloadImage(url);</span><br><span class="line">                if (bitmap == null) return;</span><br><span class="line">                if (imageView.getTag().equals(url)) &#123;</span><br><span class="line">                    imageView.setImageBitmap(bitmap);</span><br><span class="line">                &#125;</span><br><span class="line">                mImageCache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载图片</span><br><span class="line">     *</span><br><span class="line">     * @param imageUrl</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Bitmap downloadImage(String imageUrl) &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(imageUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置是否使用SD卡缓存</span><br><span class="line">     *</span><br><span class="line">     * @param useDiskCache</span><br><span class="line">     */</span><br><span class="line">    public void setUseDiskCache(boolean useDiskCache) &#123;</span><br><span class="line">        isUseDiskCache = useDiskCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-进一步改造，使用双缓存，优先使用内存加载，如果无再使用SD卡缓存"><a href="#4-进一步改造，使用双缓存，优先使用内存加载，如果无再使用SD卡缓存" class="headerlink" title="4.进一步改造，使用双缓存，优先使用内存加载，如果无再使用SD卡缓存"></a>4.进一步改造，使用双缓存，优先使用内存加载，如果无再使用SD卡缓存</h2><p>以上代码修改虽然增加了SD卡缓存，但是为了节省用户的流量及加载速度我们应该设计成优先使用内存加载，如果无再使用SD卡缓存。</p><h3 id="4-1增加双缓存类"><a href="#4-1增加双缓存类" class="headerlink" title="4.1增加双缓存类"></a>4.1增加双缓存类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class DoubleCache &#123;</span><br><span class="line"></span><br><span class="line">    ImageCache mMemoryCache = new ImageCache();</span><br><span class="line">    DiskCache mDiskCache = new DiskCache();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 优先使用内存加载，如果无再使用SD卡缓存</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Bitmap get(String url) &#123;</span><br><span class="line">        Bitmap bitmap = mMemoryCache.get(url);</span><br><span class="line">        if (bitmap == null) &#123;</span><br><span class="line">            bitmap = mDiskCache.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将图片缓存到内存和SD卡中</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param bitmap</span><br><span class="line">     */</span><br><span class="line">    public void put(String url, Bitmap bitmap) &#123;</span><br><span class="line">        mMemoryCache.put(url, bitmap);</span><br><span class="line">        mDiskCache.put(url, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2ImageLoader增加双缓存配置"><a href="#4-2ImageLoader增加双缓存配置" class="headerlink" title="4.2ImageLoader增加双缓存配置"></a>4.2ImageLoader增加双缓存配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">    // 内存缓存</span><br><span class="line">    ImageCache mImageCache = new ImageCache();</span><br><span class="line">    // SD卡缓存</span><br><span class="line">    DiskCache mDiskCache = new DiskCache();</span><br><span class="line">    // 双缓存</span><br><span class="line">    DoubleCache mDoubleCache = new DoubleCache();</span><br><span class="line">    // 是否使用SD卡缓存</span><br><span class="line">    boolean isUseDiskCache = false;</span><br><span class="line">    // 是否使用双缓存</span><br><span class="line">    boolean isUseDoubleCache = false;</span><br><span class="line">    // 线程池，线程池数量为CPU的数量</span><br><span class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</span><br><span class="line">            Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载显示图片</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param imageView</span><br><span class="line">     */</span><br><span class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</span><br><span class="line">        // 优先从缓存中加载</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        if (isUseDoubleCache) &#123;</span><br><span class="line">            bitmap = mDoubleCache.get(url);</span><br><span class="line">        &#125; else if (isUseDiskCache) &#123;</span><br><span class="line">            bitmap = mDiskCache.get(url);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            bitmap = mImageCache.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        if (bitmap != null) &#123;</span><br><span class="line">            imageView.setImageBitmap(bitmap);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        imageView.setTag(url);</span><br><span class="line">        mExecutorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Bitmap bitmap = downloadImage(url);</span><br><span class="line">                if (bitmap == null) return;</span><br><span class="line">                if (imageView.getTag().equals(url)) &#123;</span><br><span class="line">                    imageView.setImageBitmap(bitmap);</span><br><span class="line">                &#125;</span><br><span class="line">                mImageCache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载图片</span><br><span class="line">     *</span><br><span class="line">     * @param imageUrl</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Bitmap downloadImage(String imageUrl) &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(imageUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置是否使用SD卡缓存</span><br><span class="line">     *</span><br><span class="line">     * @param useDiskCache</span><br><span class="line">     */</span><br><span class="line">    public void setUseDiskCache(boolean useDiskCache) &#123;</span><br><span class="line">        isUseDiskCache = useDiskCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置是否使用双缓存</span><br><span class="line">     *</span><br><span class="line">     * @param useDoubleCache</span><br><span class="line">     */</span><br><span class="line">    public void setUseDoubleCache(boolean useDoubleCache) &#123;</span><br><span class="line">        isUseDoubleCache = useDoubleCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上改造总算可以了，但是这样每次增加缓存策略都要修改源代码，这样很有可能引入bug,所以我们的原则是要对修改关闭，对扩展开放，这样以后有新需求的时候我们就可以使用扩展的方法来实现。</p><h2 id="5-抽象公共方法的接口"><a href="#5-抽象公共方法的接口" class="headerlink" title="5.抽象公共方法的接口"></a>5.抽象公共方法的接口</h2><h3 id="5-1接口抽取"><a href="#5-1接口抽取" class="headerlink" title="5.1接口抽取"></a>5.1接口抽取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public interface ImageCache &#123;</span><br><span class="line">    Bitmap get(String url);</span><br><span class="line"></span><br><span class="line">    void put(String url, Bitmap bitmap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2ImageLoader注入接口的实现类"><a href="#5-2ImageLoader注入接口的实现类" class="headerlink" title="5.2ImageLoader注入接口的实现类"></a>5.2ImageLoader注入接口的实现类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.BitmapFactory;</span><br><span class="line">import android.widget.ImageView;</span><br><span class="line"></span><br><span class="line">import java.net.HttpURLConnection;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class ImageLoader &#123;</span><br><span class="line"></span><br><span class="line">    ImageCache mImageCache = new MemoryCache();</span><br><span class="line"></span><br><span class="line">    // 线程池，线程池数量为CPU的数量</span><br><span class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</span><br><span class="line">            Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注入缓存实现</span><br><span class="line">     *</span><br><span class="line">     * @param mImageCache</span><br><span class="line">     */</span><br><span class="line">    public void setmImageCache(ImageCache mImageCache) &#123;</span><br><span class="line">        this.mImageCache = mImageCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载显示图片</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param imageView</span><br><span class="line">     */</span><br><span class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</span><br><span class="line">        Bitmap bitmap = mImageCache.get(url);</span><br><span class="line">        if (bitmap != null) &#123;</span><br><span class="line">            imageView.setImageBitmap(bitmap);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 图片没有缓存提交到线程池中下载</span><br><span class="line">        submitLoadRequest(url, imageView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void submitLoadRequest(final String url, final ImageView imageView) &#123;</span><br><span class="line">        imageView.setTag(url);</span><br><span class="line">        mExecutorService.submit(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Bitmap bitmap = downloadImage(url);</span><br><span class="line">                if (bitmap == null) return;</span><br><span class="line">                if (imageView.getTag().equals(url)) &#123;</span><br><span class="line">                    imageView.setImageBitmap(bitmap);</span><br><span class="line">                &#125;</span><br><span class="line">                mImageCache.put(url, bitmap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载图片</span><br><span class="line">     *</span><br><span class="line">     * @param imageUrl</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Bitmap downloadImage(String imageUrl) &#123;</span><br><span class="line">        Bitmap bitmap = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL url = new URL(imageUrl);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3内存缓存、SD卡缓存和双缓存分别实现接口"><a href="#5-3内存缓存、SD卡缓存和双缓存分别实现接口" class="headerlink" title="5.3内存缓存、SD卡缓存和双缓存分别实现接口"></a>5.3内存缓存、SD卡缓存和双缓存分别实现接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.anloq.sdk.imageloader;</span><br><span class="line"></span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by xpf on 2017/10/22 :)</span><br><span class="line"> * Function:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class DoubleCache implements ImageCache &#123;</span><br><span class="line"></span><br><span class="line">    ImageCache mMemoryCache = new MemoryCache();</span><br><span class="line">    ImageCache mDiskCache = new DiskCache();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 优先使用内存加载，如果无再使用SD卡缓存</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Bitmap get(String url) &#123;</span><br><span class="line">        Bitmap bitmap = mMemoryCache.get(url);</span><br><span class="line">        if (bitmap == null) &#123;</span><br><span class="line">            bitmap = mDiskCache.get(url);</span><br><span class="line">        &#125;</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将图片缓存到内存和SD卡中</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param bitmap</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void put(String url, Bitmap bitmap) &#123;</span><br><span class="line">        mMemoryCache.put(url, bitmap);</span><br><span class="line">        mDiskCache.put(url, bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存缓存、SD卡缓存实现同上。</p><h2 id="6-外部调用及设置缓存策略"><a href="#6-外部调用及设置缓存策略" class="headerlink" title="6.外部调用及设置缓存策略"></a>6.外部调用及设置缓存策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void loadImage() &#123;</span><br><span class="line">        ImageLoader imageLoader = new ImageLoader();</span><br><span class="line">        // 使用内存缓存</span><br><span class="line">        imageLoader.setmImageCache(new MemoryCache());</span><br><span class="line">        // 使用SD卡缓存</span><br><span class="line">        imageLoader.setmImageCache(new DiskCache());</span><br><span class="line">        // 使用双缓存</span><br><span class="line">        imageLoader.setmImageCache(new DoubleCache());</span><br><span class="line">        // 使用自定义的图片缓存</span><br><span class="line">        imageLoader.setmImageCache(new ImageCache() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Bitmap get(String url) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void put(String url, Bitmap bitmap) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        String imageUrl = &quot;http://p1.meituan.net/160.0.80/xianfu/5e369ac9d6aa54125ad1b6562282b2ca36024.jpeg&quot;;</span><br><span class="line">        imageLoader.displayImage(imageUrl, imageView);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>经过上述代码的重构，我们可以通过<strong>setImageCache(ImageCache cache)</strong>方法注入不同的缓存实现，来使得ImageLoader更简单、健壮、扩展性好灵活性也更高。以上三种缓存图片的具体实现完全不一样，但是它们都有一个共同的特点是都实现了ImageCache接口。当用户需要增加一种新的缓存策略时，我们只需新建一个实现ImageCache接口等待类就可以了，这样就实现了千变万化的缓存策略，并且新扩展的策略不会影响导致ImageLoader类的修改，这正是体现了“对修改关闭，对扩展开放的”原则，所以，我们在设计写代码的时候应该认真地进行思考，希望大家一起思考，一起学习，有所成长！</p><p>源码下载链接：</p><p><a href="https://github.com/xinpengfei520/MyImageLoader" target="_blank" rel="noopener">https://github.com/xinpengfei520/MyImageLoader</a></p><p>如果本文对你有帮助，欢迎大家点赞、评论，码字不易，再小的支持也是对博主的莫大鼓励！</p><p>今天的分享就到这里注明，谢谢！</p><p>声明：文中部分代码摘抄自《Android源码设计模式》一书。</p><p>注：本文由博主原创，转载请注明出处，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;需求：设计一个图片加载工具类。&lt;br&gt;要求：职责单一、可扩展性强、实现三级缓存，遵循开闭原则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-改造前原始代码&quot;&gt;&lt;a href=&quot;#1-改造前原始代码&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://www.x-sir.com/categories/Android/"/>
    
    
      <category term="ImageLoader" scheme="http://www.x-sir.com/tags/ImageLoader/"/>
    
      <category term="GitHub" scheme="http://www.x-sir.com/tags/GitHub/"/>
    
  </entry>
  
</feed>
